/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * The source type of the travel mode used by the travel mode context.
 */
export type NetworkTravelModeSourceType = 0 | 1 | 2;
/**
 * The data type of a value.
 */
export type ValueType = 2 | 3 | 4 | 5 | 7 | 8 | 11;
/**
 * Policy on when to return the from-edge in the network forward star adjacencies object.
 */
export type EsriNetworkForwardStarBacktrack = 0 | 1 | 2 | 3;
/**
 * Describes the different types of units.
 */
export type UnitType = 0 | 1 | 2 | 3;

/**
 * Specifies the travel mode travel mode to be applied. Depending on the SourceType, some properties are conditionally required to indicate the travel mode.
 */
export interface CIMNetworkTravelModeDefinitionContext {
  /**
   * Gets or sets the name.
   */
  name?: null | string;
  /**
   * Gets or sets the travel mode source type.
   */
  sourceType?: NetworkTravelModeSourceType;
  /**
   * Gets or sets the source Layer URI of the item. Set if sourced from another layer.
   */
  sourceLayerURI?: null | string;
  /**
   * Gets or sets the travel mode. Required if not sourced from a named travel mode of a Network Dataset.
   */
  travelMode?: null | CIMNetworkTravelModeDefinition;
}
/**
 * The network travel mode is used to configure a group of cost, traversability, and other analysis configurations.
 */
export interface CIMNetworkTravelModeDefinition {
  /**
   * Gets or sets the name.
   */
  name?: null | string;
  /**
   * Gets or sets the mode type.
   */
  modeType?: null | string;
  /**
   * Gets or sets the description.
   */
  description?: null | string;
  /**
   * Gets or sets the impedance attribute name.
   */
  impedanceAttributeName?: null | string;
  /**
   * Gets or sets the time attribute name.
   */
  timeAttributeName?: null | string;
  /**
   * Gets or sets the distance attribute name.
   */
  distanceAttributeName?: null | string;
  /**
   * Gets or sets the array of restriction attribute names.
   */
  restrictionAttributeNames?: string[] | null;
  /**
   * Gets or sets the array of network attribute parameter definition values.
   */
  attributeParameterValues?: CIMNetworkAttributeParameterDefinitionValue[] | null;
  /**
   * Gets or sets a value indicating whether to use hierarchy.
   */
  useHierarchy?: boolean;
  /**
   * Gets or sets the u-turn at junctions policy for traversal between stops.
   */
  uTurnAtJunctionsPolicy?: EsriNetworkForwardStarBacktrack;
  /**
   * Gets or sets a value indicating whether to use output geometry precision.
   */
  useOutputGeometryPrecision?: boolean;
  /**
   * Gets or sets the output geometry precision value.
   */
  outputGeometryPrecisionValue?: number;
  /**
   * Gets or sets the output geometry precision units.
   */
  outputGeometryPrecisionUnits?: null | LinearUnit;
}
/**
 * Provides access to read or update the value assigned to a network parameter of a network attribute.
 */
export interface CIMNetworkAttributeParameterDefinitionValue {
  /**
   * Gets or sets the network attribute name.
   */
  networkAttributeName?: null | string;
  /**
   * Gets or sets the network parameter name.
   */
  networkParameterName?: null | string;
  /**
   * Gets or sets a value indicating whether this is a restriction usage type network parameter.
   */
  isRestrictionUsage?: boolean;
  /**
   * Gets or sets the value type. Supports: Short, Long, Float, Double, Date, String, Bool.
   */
  valueType?: ValueType;
  value?: unknown;
}
/**
 * Represents a linear unit of measure used by a Geometry or SpatialReference, or in measurement conversion functions.
 */
export interface LinearUnit {
  /**
   * Gets the well-known ID of the unit. If the unit is a custom unit, then the factory code will be 0.
   */
  factoryCode?: number;
  /**
   * Gets the well-known text of the unit.
   */
  wkt?: null | string;
  /**
   * Gets the name of the unit.
   */
  name?: null | string;
  /**
   * Gets the conversion factor of the unit.
   */
  conversionFactor?: number;
  /**
   * Gets the type of unit.
   */
  unitType?: UnitType;
  /**
   * Gets the meters per unit.
   */
  metersPerUnit?: number;
}
