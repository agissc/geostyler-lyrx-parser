/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Relationship Cardinality.
 */
export type EsriRelCardinality = 0 | 1 | 2;
/**
 * Field search modes.
 *
 */
export type DataSearchMode = 0 | 1;
/**
 * Time units.
 */
export type EsriTimeUnits = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10;
/**
 * Visual variable info types.
 *
 */
export type ExpressionReturnType = 0 | 1 | 2;
/**
 * Bind variable types.
 */
export type BindVariableType = 0 | 1 | 2 | 3 | 4;
/**
 * Represents the rank or "level" at which the layer participates in filtering for Indoors or floor-aware layers.
 */
export type FloorFilterRank = 0 | 1 | 2 | 3;

/**
 * Represents a raster table.
 *
 */
export interface CIMRasterTable {
  /**
   * Gets or sets the definition expression that can subset the rows in the virtual table.
   */
  definitionExpression?: null | string;
  /**
   * Gets or sets the Name of definition expression.
   */
  definitionExpressionName?: null | string;
  /**
   * Gets or sets the definition filter choices.
   */
  definitionFilterChoices?: CIMDefinitionFilter[] | null;
  /**
   * Gets or sets the name of the attribute field that will be used as a label that represents each row in the table. The display field must be able to be represented as a string (string or numeric).
   */
  displayField?: null | string;
  /**
   * Gets or sets a value indicating whether or not the table can be edited.
   */
  editable?: boolean;
  /**
   * Gets or sets the relates.
   */
  relates?: CIMRelateInfoBase[] | null;
  /**
   * Gets or sets the field descriptions. Field descriptions for fields may only be written if values are overridden from defaults.
   */
  fieldDescriptions?: CIMFieldDescription[] | null;
  /**
   * Gets or sets the time fields.
   */
  timeFields?: null | CIMTimeTableDefinition;
  /**
   * Gets or sets the time definition.
   */
  timeDefinition?: null | CIMTimeDataDefinition;
  /**
   * Gets or sets the time display definition.
   */
  timeDisplayDefinition?: null | CIMTimeDisplayDefinition;
  /**
   * Gets or sets the time definition fields.
   */
  timeDimensionFields?: null | CIMTimeDimensionDefinition;
  /**
   * Gets or sets the range definitions.
   */
  rangeDefinitions?: CIMRangeDefinition[] | null;
  /**
   * Gets or sets the active range name.
   */
  activeRangeName?: null | string;
  /**
   * Gets or sets a value indicating whether related data should be selected when creating a new selection.
   */
  selectRelatedData?: boolean;
  /**
   * Gets or sets the bind variables.
   */
  bindVariables?: CIMBindVariable[] | null;
  /**
   * Gets or sets the subtype value that should be used in the feature layer definition. This property is honored only when feature layer is a member of SubtypeLayer.
   */
  subtypeValue?: number;
  /**
   * Gets or sets a value indicating whether or not the SubtypeValue should be used.
   */
  useSubtypeValue?: boolean;
  /**
   * Gets or sets the expression information used for coming up with a string that represents a row or a feature.
   */
  displayExpressionInfo?: null | CIMExpressionInfo;
  /**
   * Gets or sets the URI of the selection set for the table.
   */
  selectionSetURI?: null | string;
  /**
   * Gets or sets floor-aware properties for the layer/table used in floor filtering.
   */
  floorAwareTableProperties?: null | CIMFloorAwareTableProperties;
  /**
   * Gets or sets the route identifier field of a route feature class.
   *
   * This property will only be set for route feature classes, namely line and polyline feature classes that are m-aware.
   */
  routeIDFieldName?: null | string;
  /**
   * Gets or sets the joins as a data connection.
   */
  joins?: null | CIMDataConnection;
}
/**
 * Contains filters so that only features satisfying these definitions will be displayed.
 *
 */
export interface CIMDefinitionFilter {
  /**
   * Gets or sets the name of the Definition Filter item.
   */
  name?: null | string;
  /**
   * Gets or sets the definition expression to filter features in the dataset.
   */
  definitionExpression?: null | string;
}
/**
 * Represents relate base.
 *
 */
export interface CIMRelateInfoBase {
  /**
   * Gets or sets the relate data connection.
   */
  dataConnection?: null | CIMDataConnection;
  /**
   * Gets or sets the foreign key.
   */
  foreignKey?: null | string;
  /**
   * Gets or sets the primary key.
   */
  primaryKey?: null | string;
  /**
   * Gets or sets the relate cardinality.
   */
  cardinality?: EsriRelCardinality;
  /**
   * Gets or sets the name.
   */
  name?: null | string;
}
/**
 * Represents a data connection.
 */
export interface CIMDataConnection {}
/**
 * Represents a field description.
 *
 */
export interface CIMFieldDescription {
  /**
   * Gets or sets the field alias.
   */
  alias?: null | string;
  /**
   * Gets or sets the field name.
   */
  fieldName?: null | string;
  /**
   * Gets or sets a value indicating whether the field is highlighted.
   */
  highlight?: boolean;
  /**
   * Gets or sets the number format.
   */
  numberFormat?: null | CIMNumberFormat;
  /**
   * Gets or sets a value indicating whether the field is read only.
   */
  readOnly?: boolean;
  /**
   * Gets or sets a value indicating whether the field is visible.
   */
  visible?: boolean;
  /**
   * Gets or sets a value indicating whether the field value is a ratio (used only by geoprocessing).
   */
  valueAsRatio?: boolean;
  /**
   * Gets or sets a value indicating whether the values from this field should be included in the search.
   */
  searchable?: boolean;
  /**
   * Gets or sets search mode to use when searching for values in this field.
   */
  searchMode?: DataSearchMode;
}
/**
 * Represents a number format.
 *
 */
export interface CIMNumberFormat {}
/**
 * Represents a time table definition.
 *
 */
export interface CIMTimeTableDefinition {
  /**
   * Gets or sets the start time field.
   */
  startTimeField?: null | string;
  /**
   * Gets or sets the end time field.
   */
  endTimeField?: null | string;
  /**
   * Gets or sets the time value format.
   */
  timeValueFormat?: null | string;
  /**
   * Gets or sets the track ID field.
   */
  trackIDField?: null | string;
}
/**
 * Represents a time data definition.
 *
 */
export interface CIMTimeDataDefinition {
  /**
   * Gets or sets a value indicating whether or not to use time for animation purposes.
   */
  useTime?: boolean;
  /**
   * Gets or sets the time reference.
   */
  timeReference?: null | TimeReference;
  /**
   * Gets or sets the custom time extent.
   */
  customTimeExtent?: null | TimeExtent;
  /**
   * Gets or sets a value indicating whether or not this dataset has live data.
   */
  hasLiveData?: boolean;
  /**
   * Gets or sets a value indicating whether the data regularly changes, so the extent needs recalculated.
   *
   */
  timeExtentCanChange?: boolean;
}
/**
 * Represents the time zone definition for a given date and time.
 */
export interface TimeReference {
  /**
   * Gets or sets the windows id for the time zone.
   */
  timeZoneNameID?: null | string;
  /**
   * Gets or sets a value indicating if the time reference should honor daylight savings time.
   */
  respectsDaylightSavingTime?: boolean;
  /**
   * Gets or sets a value indicating if the time reference should respect dynamic rules for adjusting with daylight savings time for specific years.
   */
  respectsDynamicAdjustmentRules?: boolean;
}
/**
 * Represents an extent of time defined by a start and end date.
 */
export interface TimeExtent {
  /**
   * Gets or sets the time zone definition of the time.
   */
  timeReference?: null | TimeReference;
  /**
   * Gets or sets the start time of the extent.
   */
  startTime?: string;
  /**
   * Gets or sets the end time of the extent.
   */
  endTime?: string;
  /**
   * Gets or sets a value indicating if the time extent is empty.
   */
  empty?: boolean;
  /**
   * Gets or sets a value indicating if the extent contains a start time. If false the time extent has no lower bound.
   */
  startTimeSpecified?: boolean;
  /**
   * Gets or sets a value indicating if the extent contains an end time. If false the time extent has no upper bound.
   */
  endTimeSpecified?: boolean;
}
/**
 * Represents a time display definition.
 *
 */
export interface CIMTimeDisplayDefinition {
  /**
   * Gets or sets a value indicating whether time is cumulative.
   */
  cumulative?: boolean;
  /**
   * Gets or sets the time interval.
   */
  timeInterval?: number;
  /**
   * Gets or sets the time interval units.
   */
  timeIntervalUnits?: EsriTimeUnits;
  /**
   * Gets or sets the time offset.
   */
  timeOffset?: number;
  /**
   * Gets or sets the time offset units.
   */
  timeOffsetUnits?: EsriTimeUnits;
  /**
   * Gets or sets a cached set of unique OLE date values.
   */
  uniqueTimes?: number[] | null;
}
/**
 * Represents a time dimension definition.
 *
 */
export interface CIMTimeDimensionDefinition {
  /**
   * Gets or sets the time dimension name.
   */
  timeDimensionName?: null | string;
  /**
   * Gets or sets the time dimension format.
   */
  timeDimensionFormat?: null | string;
}
/**
 * Represents a range definition.
 *
 */
export interface CIMRangeDefinition {
  /**
   * Gets or sets the name.
   */
  name?: null | string;
  /**
   * Gets or sets the field name.
   */
  fieldName?: null | string;
  /**
   * Gets or sets the current range.
   */
  currentRange?: null | CIMRange;
  /**
   * Gets or sets the custom full extent.
   */
  customFullExtent?: null | CIMRange;
  /**
   * Gets or sets a value indicating whether or not range is exclusion.
   */
  isExclusion?: boolean;
  /**
   * Gets or sets ExpressionInfo that contains the Arcade expression that returns a string representing range alias value.
   */
  aliasExpressionInfo?: null | CIMExpressionInfo;
}
/**
 * Represents a range.
 *
 */
export interface CIMRange {
  /**
   * Gets or sets the minimum.
   */
  min?: number;
  /**
   * Gets or sets the maximum.
   */
  max?: number;
}
/**
 * Represents the properties required for authoring an Arcade expression.
 */
export interface CIMExpressionInfo {
  /**
   * Gets or sets the human readable text that describes the expression.
   */
  title?: null | string;
  /**
   * Gets or sets the Arcade expression used to evaluate and return the value that a property expects.
   */
  expression?: null | string;
  /**
   * Gets or sets the Name of the expression.
   */
  name?: null | string;
  /**
   * Gets or sets the ReturnType of the expression.
   */
  returnType?: ExpressionReturnType;
}
/**
 * Represents a bind variable.
 */
export interface CIMBindVariable {
  /**
   * Gets or sets the name of the variable. The name must be unique among all variables.
   */
  variableName?: null | string;
  /**
   * Gets or sets the alias of the variable.
   */
  alias?: null | string;
  /**
   * Gets or sets the type of the variable.
   */
  dataType?: BindVariableType;
}
/**
 * Represents floor-aware properties for the layer/table used in floor filtering.
 *
 */
export interface CIMFloorAwareTableProperties {
  /**
   * Gets or sets rank or "level" at which the layer/table participates in filtering for Indoors or floor-aware layers/tables.
   */
  floorFilterRank?: FloorFilterRank;
  /**
   * Gets or sets the name of the field that carries the floor value used for floor filtering.
   */
  floorField?: null | string;
}
