/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type CIM3DLayerProperties = CIMObject & {
  /**
   * Gets or sets a value indicating whether shadows are enabled. If true, this layer's features contribute to shadows.
   */
  castShadows?: boolean;
  /**
   * Gets or sets a value indicating whether this layer is lit.
   */
  isLayerLit?: boolean;
  /**
   * Gets or sets the layer's face culling setting.
   */
  layerFaceCulling?: FaceCulling3D;
  /**
   * Gets or sets the maximum distance at which objects in view are visible. Objects beyond this point don't get rendered.
   */
  maxDistance?: number;
  /**
   * Gets or sets the maximum radius from the camera at which objects outside the view are loaded. Values are in Meters.
   */
  maxPreloadDistance?: number;
  /**
   * Gets or sets the minimum distance at which objects in view are visible. Objects closer than this don't get rendered.
   */
  minDistance?: number;
  /**
   * Gets or sets the minimum radius from the camera at which objects at which objects outside the view are loaded. Values are in Meters.
   */
  minPreloadDistance?: number;
  /**
   * Gets or sets the distance (in visible range) at which high resolution textures change to low resolution textures for objects outside the view. Range is 0 to 1.
   */
  preloadTextureCutoffHigh?: number;
  /**
   * Gets or sets the distance (in visible range) at which low resolution textures change to solid colors for objects outside the view. Range is 0 to 1.
   */
  preloadTextureCutoffLow?: number;
  /**
   * Gets or sets the distance (in visible range) at which the high resolution textures change to low resolution textures. Range is 0 to 1.
   */
  textureCutoffHigh?: number;
  /**
   * Gets or sets the distance (in visible range) at which the high resolution textures change to solid colors. Range is 0 to 1.
   */
  textureCutoffLow?: number;
  /**
   * Gets or sets the downscaling factor. All textures for this layer are downscaled by this additional factor on loading.
   */
  textureDownscalingFactor?: number;
  /**
   * Gets or sets a value indicating whether uncompressed textures are compressed using DXT5 at load time.
   */
  useCompressedTextures?: boolean;
  /**
   * Gets or sets the layer's vertical exaggeration.
   */
  verticalExaggeration?: number;
  /**
   * Gets or sets the layer's exaggeration mode.
   */
  exaggerationMode?: ExaggerationMode;
  /**
   * Gets or sets the layer's vertical unit.
   */
  verticalUnit?: null | Unit;
  /**
   * Gets or sets the depth priority of a 3D layer.
   */
  depthPriority?: number;
  /**
   * Gets or sets the layer's lighting setting.
   */
  lighting?: Lighting3D;
  /**
   * Gets or sets a value indicating whether true alpha is quantized to fully opaque or transparent when false, actual values are used in marker drawing.
   */
  optimizeMarkerTransparency?: boolean;
  /**
   * Gets or sets a value indicating whether to use depth writing for transparency. This should be set to true if anomalies are seen in drawing order of transparent features in the same feature class.
   */
  useDepthWritingForTransparency?: boolean;
};
/**
 * The types of face culling.
 */
export type FaceCulling3D = 0 | 1 | 2 | 3;
/**
 * Represents the exaggeration modes.
 *
 */
export type ExaggerationMode = 0 | 1;
/**
 * Describes the different types of units.
 */
export type UnitType = 0 | 1 | 2 | 3;
/**
 * The types of lighting.
 *
 */
export type Lighting3D = 0 | 1 | 2 | 3 | 4 | 5;

/**
 * Represents the base CIM object class.
 *
 */
export interface CIMObject {}
/**
 * A common base class between all units, linear, area and angular units.
 */
export interface Unit {
  /**
   * Gets the well-known ID of the unit. If the unit is a custom unit, then the factory code will be 0.
   */
  factoryCode?: number;
  /**
   * Gets the well-known text of the unit.
   */
  wkt?: null | string;
  /**
   * Gets the name of the unit.
   */
  name?: null | string;
  /**
   * Gets the conversion factor of the unit.
   */
  conversionFactor?: number;
  /**
   * Gets the type of unit.
   */
  unitType?: UnitType;
}
