/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type CIMVoxelVolume1 = CIMObject & {
  /**
   * Gets or sets the volume ID, which must be unique among all volumes in the layer.
   */
  id?: number;
  /**
   * Gets or sets a collection of sections.
   */
  sections?: CIMVoxelPlane[] | null;
  /**
   * Gets or sets a collection of slices.
   */
  slices?: CIMVoxelPlane[] | null;
  /**
   * Gets or sets the variable profiles.
   */
  variableProfiles?: CIMVoxelVariableProfile[] | null;
};
export type CIMVoxelPlane = CIMObject & {
  /**
   * Gets or sets the ID.
   */
  id?: null | string;
  /**
   * Gets or sets the plane's name.
   */
  name?: null | string;
  /**
   * Gets or sets a value indicating whether the plane is visible.
   */
  visible?: boolean;
  /**
   * Gets or sets a point on the plane, specified in voxel coordinates.
   */
  position?: null | MapPoint;
  /**
   * Gets or sets the direction vector of the plane, which is a unit vector representing the normal to the plane.
   */
  normal?: null | MapPoint;
};
export type MapPoint = Geometry & {
  /**
   * Gets the GeometryType of this instance.  Always returns Point.
   */
  geometryType?: GeometryType;
  /**
   * Gets the point count of the geometry. This is always 1.
   */
  pointCount?: number;
  /**
   * Gets the X-coordinate.
   */
  x?: number;
  /**
   * Gets the Y-coordinate.
   */
  y?: number;
  /**
   * Gets the Z-coordinate.
   */
  z?: number;
  /**
   * Gets the measure value.
   */
  m?: number;
  /**
   * Gets the ID value.
   */
  id?: number;
  /**
   * Gets a Coordinate2D structure with the X and Y values.
   */
  coordinate2D?: Coordinate2D;
  /**
   * Gets a Coordinate3D structure with the X, Y, and Z values.
   */
  coordinate3D?: Coordinate3D;
  /**
   * Gets the minimum enclosing envelope of the geometry.
   */
  extent?: null | Envelope;
  /**
   * Gets a value indicating whether or not the geometry is empty.
   */
  isEmpty?: boolean;
};
/**
 * Describes the different types of units.
 */
export type UnitType = 0 | 1 | 2 | 3;
export type Envelope = Geometry & {
  /**
   * Gets the GeometryType of this instance.  Always returns Envelope.
   */
  geometryType?: GeometryType;
  /**
   * Gets the point count of this instance. Always returns 5.
   */
  pointCount?: number;
  /**
   * Gets the X minimum of this instance.
   */
  xMin?: number;
  /**
   * Gets the Y minimum of this instance.
   */
  yMin?: number;
  /**
   * Gets the X maximum of this instance.
   */
  xMax?: number;
  /**
   * Gets the Y maximum of this instance.
   */
  yMax?: number;
  /**
   * Gets the Z minimum of this instance.
   */
  zMin?: number;
  /**
   * Gets the Z maximum of this instance.
   */
  zMax?: number;
  /**
   * Gets the M minimum of this instance.
   */
  mMin?: number;
  /**
   * Gets the M maximum of this instance.
   */
  mMax?: number;
  /**
   * Gets the ID minimum of this instance.
   */
  idMin?: number;
  /**
   * Gets the ID maximum of this instance.
   */
  idMax?: number;
  /**
   * Gets the center of this instance as a Coordinate2D.
   */
  centerCoordinate?: Coordinate2D;
  /**
   * Gets the center of this instance as a MapPoint.
   */
  center?: null | MapPoint;
  /**
   * Gets the height of this instance.
   */
  height?: number;
  /**
   * Gets the width of this instance.
   */
  width?: number;
  /**
   * Gets the depth of this instance.
   */
  depth?: number;
  /**
   * Gets the perimeter length of this instance.
   */
  length?: number;
  /**
   * Gets the 3D length of the perimeter of this instance.
   */
  length3D?: number;
  /**
   * Gets the area of this instance.
   */
  area?: number;
  /**
   * Gets the minimum enclosing envelope of this instance. Returns null if this geometry has IsEmpty = true.
   */
  extent?: null | Envelope;
  /**
   * Gets a value indicating whether or not the geometry is empty.
   */
  isEmpty?: boolean;
};
/**
 * Describes the different types of geometry.
 */
export type GeometryType = 0 | 513 | 3077 | 3594 | 8710 | 25607 | 27656 | 32777;
export type CIMVoxelVariableProfile = CIMObject & {
  /**
   * Gets or sets the variable that the profile is associated with.
   */
  variable?: null | string;
  /**
   * Gets or sets the variable description.
   */
  description?: null | string;
  /**
   * Gets or sets the variable data type.
   */
  dataType?: VoxelVariableDataType;
  /**
   * Gets or sets the filters.
   */
  filters?: CIMVoxelFilter[] | null;
  /**
   * Gets or sets the symbol renderer.
   */
  renderer?: null | CIMVoxelRenderer;
  /**
   * Gets or sets the variable precision.
   */
  precision?: VoxelVariablePrecision;
  /**
   * Gets or sets the signature for the variable.
   */
  signature?: null | string;
  /**
   * Gets or sets the signature version for the variable.
   */
  signatureVersion?: number;
  /**
   * Gets or sets a collection of isosurfaces.
   */
  isosurfaces?: CIMIsosurface[] | null;
};
/**
 * Voxel variable data types.
 */
export type VoxelVariableDataType = 0 | 1;
export type CIMVoxelFilter = CIMObject;
export type CIMVoxelRenderer = CIMObject;
/**
 * Voxel variable precision. The lower the precision the smaller the data size of the voxel layer.
 */
export type VoxelVariablePrecision = 0 | 1 | 2 | 3;
export type CIMIsosurface = CIMObject & {
  /**
   * Gets or sets the ID.
   */
  id?: null | string;
  /**
   * Gets or sets the isosurface color.
   */
  color?: null | CIMColor;
  /**
   * Gets or sets a value indicating whether the color was set by user.
   */
  isCustomColor?: boolean;
  /**
   * Gets or sets the variable value.
   */
  value?: number;
  /**
   * Gets or sets the isosurface name.
   */
  name?: null | string;
  /**
   * Gets or sets a value indicating whether the isosurface is visible.
   */
  visible?: boolean;
};
export type CIMColor = CIMObject & {
  /**
   * Gets and sets alpha.
   */
  alpha?: number;
  /**
   * Gets or sets the color spaced used defined by an ICC color profile.
   */
  colorSpace?: null | CIMColorSpace;
  /**
   * Gets or sets the values for the color and alpha channels as defined by the color model. Alpha is the last value in the array for all colors.
   */
  values?: number[] | null;
};
export type CIMColorSpace = CIMObject;
export type CIMVoxelVolume = CIMVoxelVolume1[];

/**
 * Represents the base CIM object class.
 *
 */
export interface CIMObject {}
/**
 * An abstract base class for objects that define geometric shapes. Geometry objects can be used
 * as geometry definitions for rendering data.
 */
export interface Geometry {
  /**
   * Gets a value indicating if the geometry has Z.
   */
  hasZ?: boolean;
  /**
   * Gets a value indicating if the geometry has M.
   */
  hasM?: boolean;
  /**
   * Gets a value indicating if the geometry has ID.
   */
  hasID?: boolean;
  /**
   * Gets the spatial reference of this instance.
   */
  spatialReference?: null | SpatialReference;
  /**
   * Gets the dimension of the geometry.
   */
  dimension?: number;
}
/**
 * Class representing a spatial reference.
 */
export interface SpatialReference {
  /**
   * Gets the well-known ID for this instance.
   */
  wkid?: number;
  /**
   * Gets the latest well-known ID for this instance.
   */
  latestWkid?: number;
  /**
   * Gets the underlying geographic coordinate system for this instance.
   * If this instance is a geographic coordinate system,
   * a pointer to this instance is returned.
   */
  gcs?: null | SpatialReference;
  /**
   * Gets the well-known text for this instance.
   */
  wkt?: null | string;
  /**
   * Gets the name of the spatial reference.
   */
  name?: null | string;
  /**
   * Gets the geographic coordinate system well-known ID.
   */
  gcsWkid?: number;
  /**
   * Gets the geographic coordinate system well-known text.
   */
  gcsWkt?: null | string;
  /**
   * Gets the vertical coordinate system well-known ID.
   */
  vcsWkid?: number;
  /**
   * Gets the vertical coordinate system well-known text.
   */
  vcsWkt?: null | string;
  /**
   * Determines if a vertical coordinate system has been defined.
   */
  hasVcs?: boolean;
  /**
   * Gets the XY Tolerance.
   */
  xyTolerance?: number;
  /**
   * Gets the XY Resolution.
   */
  xyResolution?: number;
  /**
   * Gets the Z Tolerance.
   */
  zTolerance?: number;
  /**
   * Gets the M Tolerance.
   */
  mTolerance?: number;
  /**
   * Gets the XY Scale.
   */
  xyScale?: number;
  /**
   * Gets the Z Scale.
   */
  zScale?: number;
  /**
   * Gets the M Scale.
   */
  mScale?: number;
  /**
   * Gets the false X.
   */
  falseX?: number;
  /**
   * Gets the false Y.
   */
  falseY?: number;
  /**
   * Gets the false Z.
   */
  falseZ?: number;
  /**
   * Gets the false M.
   */
  falseM?: number;
  /**
   * Gets the left longitude value of the geographic coordinate system.
   */
  leftLongitude?: number;
  /**
   * Gets the right longitude value of the geographic coordinate system.
   */
  rightLongitude?: number;
  /**
   * Gets the HighPrecision flag of this instance.
   */
  isHighPrecision?: boolean;
  /**
   * Gets the units that the spatial reference coordinates are in.
   */
  unit?: null | Unit;
  /**
   * Gets the units that the spatial reference z-coordinates are in.
   */
  zUnit?: null | Unit;
  /**
   * Gets the central meridian of the projected coordinate system.
   */
  centralMeridian?: number;
  /**
   * Gets if this is a geographic coordinate system.
   */
  isGeographic?: boolean;
  /**
   * Gets if this is a projected coordinate system.
   */
  isProjected?: boolean;
  /**
   * Gets if this is an image coordinate system.
   */
  isImage?: boolean;
  /**
   * Gets if this is the unknown coordinate system.
   */
  isUnknown?: boolean;
  /**
   * Gets if this is instance is pannable.
   */
  isPannable?: boolean;
  /**
   * Gets the square domain extent of the spatial reference.
   */
  domain?: null | Envelope;
  /**
   * Gets the horizontal datum of this spatial reference.
   */
  datum?: null | Datum;
}
/**
 * A common base class between all units, linear, area and angular units.
 */
export interface Unit {
  /**
   * Gets the well-known ID of the unit. If the unit is a custom unit, then the factory code will be 0.
   */
  factoryCode?: number;
  /**
   * Gets the well-known text of the unit.
   */
  wkt?: null | string;
  /**
   * Gets the name of the unit.
   */
  name?: null | string;
  /**
   * Gets the conversion factor of the unit.
   */
  conversionFactor?: number;
  /**
   * Gets the type of unit.
   */
  unitType?: UnitType;
}
/**
 * A lightweight structure that holds X and Y values.
 */
export interface Coordinate2D {
  /**
   * Gets or sets the X-component.
   */
  x?: number;
  /**
   * Gets or sets the Y-component.
   */
  y?: number;
  /**
   * Gets or sets the length of the Coordinate2D as a vector.
   */
  magnitude?: number;
  /**
   * Indicates if the Coordinate2D is empty.
   */
  isEmpty?: boolean;
}
/**
 * Describes the horizontal datum of a geographic coordinate system. It is returned from Datum.
 */
export interface Datum {
  /**
   * Gets the well-known ID of this horizontal datum.
   */
  wkid?: number;
  /**
   * Gets the well-known ID of the spheroid of this horizontal datum.
   */
  spheroidWkid?: number;
  /**
   * Gets the length of the semi-major axis of the spheroid of this horizontal datum.
   */
  spheroidSemiMajorAxis?: number;
  /**
   * Gets the length of the semi-minor axis of the spheroid of this horizontal datum.
   */
  spheroidSemiMinorAxis?: number;
  /**
   * Gets the flattening ratio of the spheroid of this horizontal datum.
   */
  spheroidFlattening?: number;
  /**
   * Gets the name of this horizontal datum.
   */
  name?: null | string;
  /**
   * Gets the name of the spheroid of this horizontal datum.
   */
  spheroidName?: null | string;
}
/**
 * A structure containing methods to manipulate 3D vertices and 3D vectors.
 */
export interface Coordinate3D {
  /**
   * Gets or sets the X-component.
   */
  x?: number;
  /**
   * Gets or sets the Y-component.
   */
  y?: number;
  /**
   * Gets or sets the Z-component.
   */
  z?: number;
  /**
   * Gets or sets the length of the Coordinate3D as a vector.
   */
  magnitude?: number;
  /**
   * Gets the inclination of the Coordinate3D. The inclination is measured in radians.
   */
  inclination?: number;
  /**
   * Gets the azimuth of the Coordinate3D. The azimuth is measured in radians.
   */
  azimuth?: number;
  /**
   * Indicates if the Coordinate3D is empty.
   */
  isEmpty?: boolean;
}
