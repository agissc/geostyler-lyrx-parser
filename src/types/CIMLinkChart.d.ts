/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type CIMLinkChart = CIMLinkChartBase & {
  /**
   * Gets or sets the link chart entities.
   */
  entities?: CIMLinkChartEntity[] | null;
  /**
   * Gets or sets the link chart relationships.
   */
  relationships?: CIMLinkChartRelationship[] | null;
  /**
   * Gets or sets the link chart layout algorithm.
   */
  layout?: LinkChartLayoutAlgorithm;
  /**
   * Gets or sets the URI of the binary reference containing the GraphML.
   */
  graphMLURI?: null | string;
  /**
   * Gets or sets a value indicating whether this link chart is expanded in the contents pane.
   */
  expanded?: boolean;
  /**
   * Gets or sets a value indicating whether this link chart is locked.
   */
  locked?: boolean;
  /**
   * Gets or sets a value indicating whether this link chart layout updates when the user moves nodes or links.
   */
  interactiveLayoutMode?: boolean;
  /**
   * Gets or sets the link chart viewport.
   */
  viewport?: null | CIMLinkChartViewport;
  /**
   * Gets or sets a value indicating whether this link chart is filtered by the minimum number of links.
   */
  filterByMinLinks?: boolean;
  /**
   * Gets or sets the minimum number of links allowed in the filter.
   */
  minLinks?: number;
};
export type CIMLinkChartBase = CIMDefinition & {};
export type CIMDefinition = CIMObject & {
  /**
   * Gets or sets the name.
   */
  name?: null | string;
  /**
   * Gets or sets the URI of the definition. Typically set by the system and used as an identifier.
   */
  uri?: null | string;
  /**
   * Gets or sets the source URI of the item. Set if sourced from an external item such as an item on a portal.
   */
  sourceURI?: null | string;
  /**
   * Gets or sets the time the source was last modified, as of the last sync. Used to detect when another sync is needed.
   */
  sourceModifiedTime?: null | TimeInstant;
  /**
   * Gets or sets the metadata URI.
   */
  metadataURI?: null | string;
  /**
   * Gets or sets a value indicating whether the CIM definition accesses metadata from its data source (the default behavior), or if it has its own metadata stored in the project.
   */
  useSourceMetadata?: boolean;
  /**
   * Gets or sets the source portal URI of the item. Set if sourced from an external item such as an item on a portal.
   */
  sourcePortalUrl?: null | string;
};
export type TimeInstant = TimeValue & {
  /**
   * Gets or sets the time.
   */
  time?: string;
};
export type TimeValue = CIMObject & {
  /**
   * Gets or sets the time zone definition of the time.
   */
  timeReference?: null | TimeReference;
};
export type TimeReference = CIMObject & {
  /**
   * Gets or sets the windows id for the time zone.
   */
  timeZoneNameID?: null | string;
  /**
   * Gets or sets a value indicating if the time reference should honor daylight savings time.
   */
  respectsDaylightSavingTime?: boolean;
  /**
   * Gets or sets a value indicating if the time reference should respect dynamic rules for adjusting with daylight savings time for specific years.
   */
  respectsDynamicAdjustmentRules?: boolean;
};
export type CIMLinkChartEntity = CIMObject & {
  /**
   * Gets or sets the Id of for the entity.
   */
  id?: null | string;
  /**
   * Gets or sets the name of the entity.
   */
  name?: null | string;
  /**
   * Gets or sets the CIMPath for the layer used to create the entity.
   */
  layerURI?: null | string;
  /**
   * Gets or sets the field used to label nodes.
   */
  labelFieldName?: null | string;
  /**
   * Gets or sets a value indicating whether the entity is non spatial. Where it has coordinates on the map. This is used to prevent drawing links on the map to the wrong nodes.
   */
  nonSpatial?: boolean;
  /**
   * Gets or sets the node drawing information.
   */
  drawingInfo?: null | CIMLinkChartNodeDrawingInfo;
  /**
   * Gets or sets the node labeling information.
   */
  labelingInfo?: null | CIMLinkChartNodeLabelingInfo;
  /**
   * Gets or sets a value indicating whether this entity is expanded in the contents pane.
   */
  expanded?: boolean;
  /**
   * Gets or sets the fields used to uniquely identify nodes. If duplicate values exist you can CollapseDuplicates.
   */
  keyFieldNames?: string[] | null;
};
export type CIMLinkChartNodeDrawingInfo = CIMObject & {
  /**
   * Gets or sets a value indicating whether the entity whether duplicate node values are consolidated. The result is one node for multiple values.
   */
  collapseDuplicates?: boolean;
  /**
   * Gets or sets the entity symbology preference.
   */
  nodeSymbology?: LinkChartSymbolizationSource;
  /**
   * Gets or sets the override symbol.
   */
  overrideSymbol?: null | CIMSymbolReference;
  /**
   * Gets or sets a value indicating whether the overview symbol color is calculated or specified.
   */
  overrideOverviewSymbolColor?: boolean;
  /**
   * Gets or sets the override overview symbol color.
   */
  overviewSymbolColor?: null | CIMColor;
  /**
   * Gets or sets a value indicating whether the node frames are shown.
   */
  showNodeFrames?: boolean;
};
/**
 * Link chart node and entity symbolization source.
 */
export type LinkChartSymbolizationSource = 0 | 1;
export type CIMSymbolReference = CIMObject & {
  /**
   * Gets or sets the primitive overrides. Typically set by renderers at draw time.
   */
  primitiveOverrides?: CIMPrimitiveOverride[] | null;
  /**
   * Gets or sets the style path. Reserved for future use.
   */
  stylePath?: null | string;
  /**
   * Gets or sets the symbol.
   */
  symbol?: null | CIMSymbol;
  /**
   * Gets or sets the symbol name.
   */
  symbolName?: null | string;
  /**
   * Gets or sets the minimum scale range the symbol reference should be displayed at.
   */
  minScale?: number;
  /**
   * Gets or sets the maximum scale range the symbol reference should be displayed at.
   */
  maxScale?: number;
  /**
   * Gets or sets an array of scale dependent sizes.
   */
  scaleDependentSizeVariation?: CIMScaleDependentSizeVariation[] | null;
  /**
   * Gets or sets the minimum distance at which symbols are visible. Objects closer than this don't get rendered.
   */
  minDistance?: number;
  /**
   * Gets or sets the maximum distance at which symbols are visible. Objects beyond this point don't get rendered.
   */
  maxDistance?: number;
};
export type CIMPrimitiveOverride = CIMObject & {
  /**
   * Gets or sets the primitive name this override applies to.
   */
  primitiveName?: null | string;
  /**
   * Gets or sets the property name in the primitive this override applies to.
   */
  propertyName?: null | string;
  /**
   * Gets or sets the expression.
   */
  expression?: null | string;
  /**
   * Gets or sets ExpressionInfo that contains the Arcade expression that returns value as a number or a string depending on the PropertyName.
   */
  valueExpressionInfo?: null | CIMExpressionInfo;
};
export type CIMExpressionInfo = CIMObject & {
  /**
   * Gets or sets the human readable text that describes the expression.
   */
  title?: null | string;
  /**
   * Gets or sets the Arcade expression used to evaluate and return the value that a property expects.
   */
  expression?: null | string;
  /**
   * Gets or sets the Name of the expression.
   */
  name?: null | string;
  /**
   * Gets or sets the ReturnType of the expression.
   */
  returnType?: ExpressionReturnType;
};
/**
 * Visual variable info types.
 *
 */
export type ExpressionReturnType = 0 | 1 | 2;
export type CIMSymbol = CIMObject;
export type CIMScaleDependentSizeVariation = CIMObject & {
  /**
   * Gets or sets the scale the size is associated with.
   */
  scale?: number;
  /**
   * Gets or sets the size for the associated scale.
   */
  size?: number;
};
export type CIMColor = CIMObject & {
  /**
   * Gets and sets alpha.
   */
  alpha?: number;
  /**
   * Gets or sets the color spaced used defined by an ICC color profile.
   */
  colorSpace?: null | CIMColorSpace;
  /**
   * Gets or sets the values for the color and alpha channels as defined by the color model. Alpha is the last value in the array for all colors.
   */
  values?: number[] | null;
};
export type CIMColorSpace = CIMObject;
export type CIMLinkChartNodeLabelingInfo = CIMLinkChartLabelingInfo & {};
export type CIMLinkChartLabelingInfo = CIMObject & {
  /**
   * Gets or sets a value indicating whether the labels are shown.
   */
  showLabels?: boolean;
  /**
   * Gets or sets the link label font family name of the font. e.g. Comic Sans.
   */
  labelFontFamilyName?: null | string;
  /**
   * Gets or sets the style name for the link label font family. e.g. Regular, Bold, or Italic.
   */
  labelFontStyleName?: null | string;
  /**
   * Gets or sets Link label font type.
   */
  labelFontType?: FontType;
  /**
   * Gets or sets Link label font size.
   */
  labelFontSize?: number;
  /**
   * Gets or sets Link Label font color.
   */
  labelFontColor?: null | CIMColor;
  /**
   * Gets or sets Link label background color.
   */
  labelBackgroundColor?: null | CIMColor;
};
/**
 * Font types.
 */
export type FontType = 0 | 1 | 2 | 3 | 4;
export type CIMLinkChartRelationship = CIMObject & {
  /**
   * Gets or sets the Id of for the relationship.
   */
  id?: null | string;
  /**
   * Gets or sets the name of the relationship.
   */
  name?: null | string;
  /**
   * Gets or sets the source entity id for the relationship.
   */
  sourceEntityId?: null | string;
  /**
   * Gets or sets the source entity backing field for the relationship.
   */
  sourceEntityBackingField?: null | string;
  /**
   * Gets or sets the target entity id for the relationship.
   */
  targetEntityId?: null | string;
  /**
   * Gets or sets the target entity backing field for the relationship.
   */
  targetEntityBackingField?: null | string;
  /**
   * Gets or sets the link drawing information. This specifies the link color, width, and dash style.
   */
  drawingInfo?: null | CIMLinkChartLinkDrawingInfo;
  /**
   * Gets or sets the link labeling information.
   */
  labelingInfo?: null | CIMLinkChartLinkLabelingInfo;
  /**
   * Gets or sets a value indicating whether this relationship is expanded in the contents pane.
   */
  expanded?: boolean;
  /**
   * Gets or sets the KeyType.  This specifies where the key fields are located.
   */
  keyType?: LinkChartRelationshipKeyType;
  /**
   * Gets or sets the path to the foreign table or layer used to create the relationship.
   */
  mapMemberURI?: null | string;
  /**
   * Gets or sets the source entity key field for the relationship.
   */
  sourceEntityKeyField?: null | string;
  /**
   * Gets or sets the target entity key field for the relationship.
   */
  targetEntityKeyField?: null | string;
};
export type CIMLinkChartLinkDrawingInfo = CIMObject & {
  /**
   * Gets or sets link color.
   */
  linkColor?: null | CIMColor;
  /**
   * Gets or sets a value for the link width.
   */
  linkWidth?: number;
  /**
   * Gets or sets a value for the link dash style.
   */
  linkDashStyle?: LinkChartLinkDashStyle;
  /**
   * Gets or sets a value indicating whether to show the directional arrowhead of a link.
   */
  showDirection?: boolean;
};
/**
 * Link chart link dash style.
 */
export type LinkChartLinkDashStyle = 0 | 1 | 2 | 3 | 4;
export type CIMLinkChartLinkLabelingInfo = CIMLinkChartLabelingInfo & {
  /**
   * Gets or sets the link label placement.
   */
  labelPlacement?: LinkChartLinkLabelPlacement;
  /**
   * Gets or sets the default label.
   */
  defaultLabel?: null | string;
};
/**
 * Link chart link label placement.
 */
export type LinkChartLinkLabelPlacement = 0 | 1;
/**
 * Link chart relationship key type.
 */
export type LinkChartRelationshipKeyType = 0 | 1 | 2;
/**
 * Link chart layout algorithm.
 */
export type LinkChartLayoutAlgorithm = 0 | 1 | 2 | 3 | 4 | 5;
export type CIMLinkChartViewport = CIMObject & {
  /**
   * Gets or sets the center X coordinate in the world coordinate system.
   */
  centerX?: number;
  /**
   * Gets or sets the center Y coordinate in the world coordinate system.
   */
  centerY?: number;
  /**
   * Gets or sets the zoom level.
   */
  zoomLevel?: number;
};

/**
 * Represents the base CIM object class.
 *
 */
export interface CIMObject {}
