/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Label expression engine types.
 *
 */
export type LabelExpressionEngine = 0 | 1 | 2 | 3;
/**
 * A list of types of features to label.
 *
 */
export type FeaturesToLabel = 0 | 1;
/**
 * The label feature types.
 *
 */
export type LabelFeatureType = 0 | 1 | 2;
/**
 * Visual variable info types.
 *
 */
export type ExpressionReturnType = 0 | 1 | 2;
/**
 * Maplex connection types.
 *
 */
export type MaplexConnectionType = 0 | 1;
/**
 * Maplex offset constraint types.
 *
 */
export type MaplexConstrainOffset = 0 | 1 | 2 | 3 | 4;
/**
 * Maplex contour alignment types.
 *
 */
export type MaplexContourAlignmentType = 0 | 1 | 2;
/**
 * Maplex contour ladder types.
 *
 */
export type MaplexContourLadderType = 0 | 1 | 2;
/**
 * Maplex graticule alignment types.
 *
 */
export type MaplexGraticuleAlignmentType = 0 | 1 | 2 | 3;
/**
 * Maplex stacking alignment.
 *
 */
export type MaplexStackingAlignment = 0 | 1 | 2 | 3 | 4;
/**
 * Maplex line feature types.
 *
 */
export type MaplexLineFeatureType = 0 | 1 | 2 | 3 | 4;
/**
 * Maplex line placement methods.
 *
 */
export type MaplexLinePlacementMethod = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;
/**
 * Maplex units.
 *
 */
export type MaplexUnit = 0 | 1 | 2 | 3 | 4;
/**
 * Maplex multipart options.
 *
 */
export type MaplexMultiPartOption = 0 | 1 | 2;
/**
 * Maplex offset along the line methods.
 *
 */
export type MaplexOffsetAlongLineMethod = 0 | 1 | 2 | 3 | 4;
/**
 * Maplex label anchor point.
 *
 */
export type MaplexLabelAnchorPoint = 0 | 1 | 2;
/**
 * Maplex point placement methods.
 *
 */
export type MaplexPointPlacementMethod = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
/**
 * Maplex anchor point types.
 *
 */
export type MaplexAnchorPointType = 0 | 1 | 2 | 3;
/**
 * Maplex polygon feature types.
 *
 */
export type MaplexPolygonFeatureType = 0 | 1 | 2 | 3;
/**
 * Maplex polygon placement methods.
 *
 */
export type MaplexPolygonPlacementMethod = 0 | 1 | 2 | 3 | 4 | 5;
/**
 * Maplex rotation types.
 *
 */
export type MaplexLabelRotationType = 0 | 1 | 2 | 3;
/**
 * Maplex rotation alignment types.
 *
 */
export type MaplexRotationAlignmentType = 0 | 1 | 2;
/**
 * Standard label engine feature weights.
 *
 */
export type StandardFeatureWeight = 0 | 1 | 2 | 3;
/**
 * Standard label engine label weight.
 *
 */
export type StandardLabelWeight = 0 | 1 | 2;
/**
 * Standard label engine number of labels options.
 *
 */
export type StandardNumLabelsOption = 0 | 1 | 2 | 3;
/**
 * Standard label engine point placement methods.
 *
 */
export type StandardPointPlacementMethod = 0 | 1 | 2 | 3;
/**
 * Standard label engine label rotation types.
 *
 */
export type StandardLabelRotationType = 0 | 1 | 2 | 3;
/**
 * Standard label engine polygon placement methods.
 *
 */
export type StandardPolygonPlacementMethod = 0 | 1 | 2;
/**
 * The types of extrusion.
 */
export type ExtrusionType = 0 | 1 | 2 | 3 | 4;
/**
 * Describes the different types of units.
 */
export type UnitType = 0 | 1 | 2 | 3;
/**
 * Relationship Cardinality.
 */
export type EsriRelCardinality = 0 | 1 | 2;
/**
 * Field search modes.
 *
 */
export type DataSearchMode = 0 | 1;
/**
 * Time units.
 */
export type EsriTimeUnits = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10;
/**
 * Bind variable types.
 */
export type BindVariableType = 0 | 1 | 2 | 3 | 4;
/**
 * Represents the rank or "level" at which the layer participates in filtering for Indoors or floor-aware layers.
 */
export type FloorFilterRank = 0 | 1 | 2 | 3;
/**
 * Describes the different types of geometry.
 */
export type GeometryType = 0 | 513 | 3077 | 3594 | 8710 | 25607 | 27656 | 32777;
/**
 * Queryable spatial relationships.
 */
export type EsriSpatialRelEnum = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
/**
 * Spatial Filter Search Order.
 */
export type EsriSearchOrder = 0 | 1;
/**
 * HTML pop-up styles.
 *
 */
export type HtmlPopupStyle = 0 | 1 | 2;
/**
 * Feature cache type options.
 *
 */
export type FeatureCacheType = 0 | 1;
/**
 * DisplayFilterType.
 */
export type DisplayFilterType = 0 | 1;
/**
 * Blending modes.
 */
export type BlendingMode =
  | 0
  | 1
  | 2
  | 3
  | 4
  | 5
  | 6
  | 7
  | 8
  | 9
  | 10
  | 11
  | 12
  | 13
  | 14
  | 15
  | 16
  | 17
  | 18
  | 19
  | 20
  | 21
  | 22
  | 23;
/**
 * The types of face culling.
 */
export type FaceCulling3D = 0 | 1 | 2 | 3;
/**
 * Represents the exaggeration modes.
 *
 */
export type ExaggerationMode = 0 | 1;
/**
 * The types of lighting.
 *
 */
export type Lighting3D = 0 | 1 | 2 | 3 | 4 | 5;
/**
 * The types of map layers by use in the map or scene.
 */
export type MapLayerType = 0 | 1 | 2 | 3;
/**
 * Display cache types.
 *
 */
export type DisplayCacheType = 0 | 1 | 2 | 3;
/**
 * Provides a type of coloring that chart series uses.
 */
export type ChartColorType = 0 | 1 | 2;
/**
 * Chart font weight types.
 */
export type ChartFontWeight = 0 | 1 | 2;
/**
 * Options for choosing text cases for charts.
 */
export type ChartTextCase = 0 | 1 | 2 | 3 | 4;
/**
 * Chart line dash style.
 */
export type ChartLineDashStyle = 0 | 1 | 2 | 3 | 4 | 5;
/**
 * Chart legend alignment options.
 */
export type ChartLegendAlignment = 0 | 1 | 2 | 3;
/**
 * Specifies the position of the content for a target.
 */
export type ChartPosition = 0 | 1 | 2 | 3 | 4;
/**
 * Specifies the type of guide.
 */
export type ChartGuideType = 0 | 1;
/**
 * Specifies the type of value.
 */
export type ChartValueType = 0 | 1;
/**
 * Provides a choice of how map selection is processed in the chart.
 */
export type ChartMapSelectionHandling = 0 | 1 | 2;
/**
 * Types of mosaic sublayers.
 *
 */
export type MosaicSubLayerType = 0 | 1 | 2 | 3;

/**
 * Represents mosaic feature sub layer.
 */
export interface CIMFeatureMosaicSubLayer {
  /**
   * Gets or sets the layer actions.
   */
  actions?: CIMLayerAction[] | null;
  /**
   * Gets or sets the set of excluded features.
   */
  exclusionSet?: number[] | null;
  /**
   * Gets or sets the data connection of the masking data.
   */
  featureMasks?: CIMDataConnection[] | null;
  /**
   * Gets or sets the collection of label class definitions.
   */
  labelClasses?: CIMLabelClass[] | null;
  /**
   * Gets or sets a value indicating whether to display labels for this layer's label classes.
   */
  labelVisibility?: boolean;
  /**
   * Gets or sets the masked symbol layers. Each SymbolLayerMasking gives the symbol layers that are masked by that masking layer.
   */
  maskedSymbolLayers?: CIMSymbolLayerMasking[] | null;
  /**
   * Gets or sets the primary symbol renderer.
   */
  renderer?: null | CIMRenderer;
  /**
   * Gets or sets a value indicating whether to scale the symbols in this layer based on the map's reference scale.
   */
  scaleSymbols?: boolean;
  /**
   * Gets or sets a value indicating whether this layer participates in snapping in the editor.
   */
  snappable?: boolean;
  /**
   * Gets or sets the symbol layer drawing properties.
   */
  symbolLayerDrawing?: null | CIMSymbolLayerDrawing;
  /**
   * Gets or sets the track renderer when displaying tracks.
   */
  trackLinesRenderer?: null | CIMRenderer;
  /**
   * Gets or sets the previous observations renderer.
   */
  previousObservationsRenderer?: null | CIMRenderer;
  /**
   * Gets or sets the previous observation count.
   */
  previousObservationsCount?: number;
  /**
   * Gets or sets a value indicating whether to use real world symbols sizes (meters) vs. points.
   */
  useRealWorldSymbolSizes?: boolean;
  /**
   * Gets or sets a value indicating whether previous observations are being drawn.
   */
  showPreviousObservations?: boolean;
  /**
   * Gets or sets the feature reduction technique in use by this layer.
   */
  featureReduction?: null | CIMFeatureReduction;
  /**
   * Gets or sets a value indicating whether track lines are being drawn.
   */
  showTracks?: boolean;
  /**
   * Gets or sets a value indicating whether to automatically generate feature templates from the renderer.
   */
  autoGenerateFeatureTemplates?: boolean;
  /**
   * Gets or sets the feature extrusion.
   */
  extrusion?: null | CIMFeatureExtrusion;
  /**
   * Gets or sets the feature elevation expression.
   */
  featureElevationExpression?: null | string;
  /**
   * Gets or sets the feature table.
   */
  featureTable?: null | CIMFeatureTable;
  /**
   * Gets or sets the feature templates.
   */
  featureTemplates?: CIMEditingTemplate[] | null;
  /**
   * Gets or sets a value indicating whether HTML pop-ups are enabled.
   */
  htmlPopupEnabled?: boolean;
  /**
   * Gets or sets the HTML pop-ups format.
   */
  htmlPopupFormat?: null | CIMHtmlPopupFormat;
  /**
   * Gets or sets a value indicating whether the layer is flattened.
   */
  isFlattened?: boolean;
  /**
   * Gets or sets a value indicating whether the layer is selectable.
   */
  selectable?: boolean;
  /**
   * Gets or sets the selection color. For polygons, this is used as the outline color.
   */
  selectionColor?: null | CIMColor;
  /**
   * Gets or sets the selection fill color. Only used for polygons.
   */
  polygonSelectionFillColor?: null | CIMColor;
  /**
   * Gets or sets the selection symbol.
   */
  selectionSymbol?: null | CIMSymbolReference;
  /**
   * Gets or sets a value indicating whether to use the selection symbol.
   */
  useSelectionSymbol?: boolean;
  /**
   * Gets or sets the page definition which allows for using current map series page to filter features.
   */
  pageDefinition?: null | CIMPageDefinition;
  /**
   * Gets or sets the feature cache type.
   */
  featureCacheType?: FeatureCacheType;
  /**
   * Gets or sets a value indicating whether the current set of display filters are honored during drawing.
   */
  enableDisplayFilters?: boolean;
  /**
   * Gets or sets the current set of scale based display filters.
   */
  displayFilters?: CIMDisplayFilter[] | null;
  /**
   * Gets or sets DisplayFiltersType value.
   */
  displayFiltersType?: DisplayFilterType;
  /**
   * Gets or sets the active display filter.
   */
  displayFilterName?: null | string;
  /**
   * Gets or sets the current set of display filters.
   */
  displayFilterChoices?: CIMDisplayFilter[] | null;
  /**
   * Gets or sets the expression for setting the feature elevation.
   */
  featureElevationExpressionInfo?: null | CIMExpressionInfo;
  /**
   * Gets or sets the per-feature blending mode which allows features in a layer to blend against other features in the same layer that have already drawn.
   */
  featureBlendingMode?: BlendingMode;
  /**
   * Gets or sets the attribution text that appears on a map that draws this layer.
   */
  attribution?: null | string;
  /**
   * Gets or sets the description.
   */
  description?: null | string;
  /**
   * Gets or sets the layer elevation.
   */
  layerElevation?: null | CIMLayerElevationSurface;
  /**
   * Gets or sets a value indicating whether this layer is expanded in the contents pane.
   */
  expanded?: boolean;
  /**
   * Gets or sets the 3D layer properties.
   */
  layer3DProperties?: null | CIM3DLayerProperties;
  /**
   * Gets or sets the URIs of the layers used as masks.
   */
  layerMasks?: string[] | null;
  /**
   * Gets or sets the map layer type.
   */
  layerType?: MapLayerType;
  /**
   * Gets or sets the maximum scale for layer draw (set as the denominator of the scale's representative fraction).
   */
  maxScale?: number;
  /**
   * Gets or sets the minimum scale for layer draw (set as the denominator of the scale's representative fraction).
   */
  minScale?: number;
  /**
   * Gets or sets a value indicating whether or not to show legends.
   */
  showLegends?: boolean;
  /**
   * Gets or sets the transparency of the layer.
   */
  transparency?: number;
  /**
   * Gets or sets a value indicating whether or not this layer is visible.
   */
  visibility?: boolean;
  /**
   * Gets or sets the display cache type.
   */
  displayCacheType?: DisplayCacheType;
  /**
   * Gets or sets the maximum display cache age.
   */
  maxDisplayCacheAge?: number;
  /**
   * Gets or sets the layer template.
   */
  layerTemplate?: null | CIMLayerTemplate;
  /**
   * Gets or sets the pop-up info.
   */
  popupInfo?: null | CIMPopupInfo;
  /**
   * Gets or sets a value indicating whether or not to show pop-ups.
   */
  showPopups?: boolean;
  /**
   * Gets or sets identifier that will be used to identify the layer in server.
   */
  serviceLayerID?: number;
  /**
   * Gets or sets identifier the layer's charts.
   */
  charts?: CIMChart[] | null;
  /**
   * Gets or sets a value indicating whether or not this layer should be included in the search. This property is honored only by layers that support search.
   */
  searchable?: boolean;
  /**
   * Gets or sets the amount of time to wait between refreshing the layer.
   */
  refreshRate?: number;
  /**
   * Gets or sets the units for the amount of time to wait between refreshing the layer.
   */
  refreshRateUnit?: EsriTimeUnits;
  /**
   * Gets or sets a value indicating whether or not the display value is shown when hovering over a layer in the view.
   */
  showMapTips?: boolean;
  /**
   * Gets or sets the custom properties of the layer. Custom properties are limited to key / value pairs of strings and developers are fully responsible for stored content.
   */
  customProperties?: CIMStringMap[] | null;
  /**
   * Gets or sets an identifier that will be used to identify the layer in a web map. This value is present if the layer originated in a web map and facilitates matching the layer back to its origin when updating the web map.
   */
  webMapLayerID?: null | string;
  /**
   * Gets or sets the blending mode for the layer.
   */
  blendingMode?: BlendingMode;
  /**
   * Gets or sets a value indicating whether layer can be draped on integrated mesh.
   */
  allowDrapingOnIntegratedMesh?: boolean;
  /**
   * Gets or sets the name.
   */
  name?: null | string;
  /**
   * Gets or sets the URI of the definition. Typically set by the system and used as an identifier.
   */
  uri?: null | string;
  /**
   * Gets or sets the source URI of the item. Set if sourced from an external item such as an item on a portal.
   */
  sourceURI?: null | string;
  /**
   * Gets or sets the time the source was last modified, as of the last sync. Used to detect when another sync is needed.
   */
  sourceModifiedTime?: null | TimeInstant;
  /**
   * Gets or sets the metadata URI.
   */
  metadataURI?: null | string;
  /**
   * Gets or sets a value indicating whether the CIM definition accesses metadata from its data source (the default behavior), or if it has its own metadata stored in the project.
   */
  useSourceMetadata?: boolean;
  /**
   * Gets or sets the source portal URI of the item. Set if sourced from an external item such as an item on a portal.
   */
  sourcePortalUrl?: null | string;
  /**
   * Gets or sets the mosaic sublayer type.
   */
  mosaicSubLayerType?: MosaicSubLayerType;
}
/**
 * Represents a layer action.
 *
 */
export interface CIMLayerAction {
  /**
   * Gets or sets the name.
   */
  name?: null | string;
  /**
   * Gets or sets activities.
   */
  activities?: CIMActivity[] | null;
  /**
   * Gets or sets conditions.
   */
  conditions?: CIMCondition[] | null;
}
/**
 * Represents activity.
 *
 */
export interface CIMActivity {}
/**
 * Represents a condition.
 */
export interface CIMCondition {}
/**
 * Represents a data connection.
 */
export interface CIMDataConnection {}
/**
 * Represents a label class which describes how to generate a set of text labels from a group of features in a feature layer.
 *
 */
export interface CIMLabelClass {
  /**
   * Gets or sets the human readable text title that describes the label expression.
   */
  expressionTitle?: null | string;
  /**
   * Gets or sets the label expression.
   */
  expression?: null | string;
  /**
   * Gets or sets the label expression engine (the language the expression is written in).
   */
  expressionEngine?: LabelExpressionEngine;
  /**
   * Gets or sets a parameter indicating which features to label.
   */
  featuresToLabel?: FeaturesToLabel;
  /**
   * Gets or sets the Maplex placement properties which are used when the map uses the Maplex label engine.
   */
  maplexLabelPlacementProperties?: null | CIMMaplexLabelPlacementProperties;
  /**
   * Gets or sets the maximum scale for labeling (set as the denominator of the scale's representative fraction).
   */
  maximumScale?: number;
  /**
   * Gets or sets the minimum scale for labeling (set as the denominator of the scale's representative fraction).
   */
  minimumScale?: number;
  /**
   * Gets or sets the name of the label class.
   */
  name?: null | string;
  /**
   * Gets or sets the priority of the label class.
   */
  priority?: number;
  /**
   * Gets or sets the standard placement properties which are used when the map uses the standard label engine.
   */
  standardLabelPlacementProperties?: null | CIMStandardLabelPlacementProperties;
  /**
   * Gets or sets the text symbol of the label class.
   */
  textSymbol?: null | CIMSymbolReference;
  /**
   * Gets or sets a value indicating whether or not to use coded value domain descriptions when labeling.
   */
  useCodedValue?: boolean;
  /**
   * Gets or sets the SQL where clause of which features to label with this label class.
   */
  whereClause?: null | string;
  /**
   * Gets or sets a value indicating whether this label class is visible.
   */
  visibility?: boolean;
  /**
   * Gets or sets the ID of the label class. This property is only used in the context of annotation.
   */
  id?: number;
}
/**
 * Represents Maplex label placement properties.
 *
 */
export interface CIMMaplexLabelPlacementProperties {
  /**
   * Gets or sets the feature type being labeled.
   */
  featureType?: LabelFeatureType;
  /**
   * Gets or sets a value indicating whether to align the label with the label direction so the label may appear upside down.
   */
  alignLabelToLineDirection?: boolean;
  /**
   * Gets or sets a value indicating whether a label may overrun one side of a polygon feature.
   */
  allowAsymmetricOverrun?: boolean;
  /**
   * Gets or sets a value indicating whether a stacked label may straddle the line feature.
   */
  allowStraddleStacking?: boolean;
  /**
   * Gets or sets the ExpressionInfo for the alternate label expression.
   */
  alternateLabelExpressionInfo?: null | CIMExpressionInfo;
  /**
   * Gets or sets a value indicating whether labels should avoid holes in polygons.
   */
  avoidPolygonHoles?: boolean;
  /**
   * Gets or sets a value indicating whether to place the label first and allow other labels to be placed over it.
   */
  backgroundLabel?: boolean;
  /**
   * Gets or sets a value indicating whether to allow holes in boundary labeling.
   */
  boundaryLabelingAllowHoles?: boolean;
  /**
   * Gets or sets a value indicating whether to allow single sided boundary labeling.
   */
  boundaryLabelingAllowSingleSided?: boolean;
  /**
   * Gets or sets a value indicating whether single sided boundary label is centered on line.
   */
  boundaryLabelingSingleSidedOnLine?: boolean;
  /**
   * Gets or sets a value indicating whether to abbreviate the label using an abbreviation dictionary.
   */
  canAbbreviateLabel?: boolean;
  /**
   * Gets or sets a value indicating whether a stacked label may be flipped over to obtain a better position.
   */
  canFlipStackedStreetLabel?: boolean;
  /**
   * Gets or sets a value indicating whether to key number the label and feature.
   */
  canKeyNumberLabel?: boolean;
  /**
   * Gets or sets a value indicating whether to place the label over end of line or over polygon boundary.
   */
  canOverrunFeature?: boolean;
  /**
   * Gets or sets a value indicating whether the label can be placed on top of the street feature.
   */
  canPlaceLabelOnTopOfFeature?: boolean;
  /**
   * Gets or sets a value indicating whether to place a label outside the polygon if it does not fit inside.
   */
  canPlaceLabelOutsidePolygon?: boolean;
  /**
   * Gets or sets a value indicating whether to reduce the size of the font.
   */
  canReduceFontSize?: boolean;
  /**
   * Gets or sets a value indicating whether the leading can be reduced for a stacked label.
   */
  canReduceLeading?: boolean;
  /**
   * Gets or sets a value indicating whether to remove the label if it overlaps with other labels.
   */
  canRemoveOverlappingLabel?: boolean;
  /**
   * Gets or sets a value indicating whether to allow the point label to be shifted upon a fixed position.
   */
  canShiftPointLabel?: boolean;
  /**
   * Gets or sets a value indicating whether to stack the label to obtain a better position.
   */
  canStackLabel?: boolean;
  /**
   * Gets or sets a value indicating whether to truncate the label using an algorithm.
   */
  canTruncateLabel?: boolean;
  /**
   * Gets or sets a value indicating whether an alternate label expression is allowed to be used.
   */
  canUseAlternateLabelExpression?: boolean;
  /**
   * Gets or sets the options for connecting line features.
   */
  connectionType?: MaplexConnectionType;
  /**
   * Gets or sets the label constraint options.
   */
  constrainOffset?: MaplexConstrainOffset;
  /**
   * Gets or sets the options for the contour label alignment.
   */
  contourAlignmentType?: MaplexContourAlignmentType;
  /**
   * Gets or sets the options for the contour label ladder types.
   */
  contourLadderType?: MaplexContourLadderType;
  /**
   * Gets or sets the maximum angle at which a contour label may be placed.
   */
  contourMaximumAngle?: number;
  /**
   * Gets or sets the name of the abbreviations dictionary referenced by this layer.
   */
  dictionaryName?: null | string;
  /**
   * Gets or sets a value indicating whether to turn off line connection.
   */
  enableConnection?: boolean;
  /**
   * Gets or sets a value indicating whether to use user-defined point placement priorities.
   */
  enablePointPlacementPriorities?: boolean;
  /**
   * Gets or sets a value indicating whether a label is to be placed at a fixed position in the polygon.
   */
  enablePolygonFixedPosition?: boolean;
  /**
   * Gets or sets a value indicating whether to place a label at a secondary offset from the line feature.
   */
  enableSecondaryOffset?: boolean;
  /**
   * Gets or sets the feature weight which controls which features may be overlapped and to what extent.
   */
  featureWeight?: number;
  /**
   * Gets or sets font height reduction limit. The font may be reduced in height until this limit is reached.
   */
  fontHeightReductionLimit?: number;
  /**
   * Gets or sets font height reduction step. This is the step interval for font height reduction.
   */
  fontHeightReductionStep?: number;
  /**
   * Gets or sets font width reduction limit. The font may be reduced in width until this limit is reached.
   */
  fontWidthReductionLimit?: number;
  /**
   * Gets or sets font width reduction step. This is the step interval for font width reduction.
   */
  fontWidthReductionStep?: number;
  /**
   * Gets or sets a value indicating whether to enable graticule alignment.
   */
  graticuleAlignment?: boolean;
  /**
   * Gets or sets the options for the graticule alignment type.
   */
  graticuleAlignmentType?: MaplexGraticuleAlignmentType;
  /**
   * Gets or sets a value indicating whether the label buffer is a hard constraint and must be honored.
   *
   */
  isLabelBufferHardConstraint?: boolean;
  /**
   * Gets or sets a value indicating whether the minimum feature size for labeling is based on area.
   *
   */
  isMinimumSizeBasedOnArea?: boolean;
  /**
   * Gets or sets a value indicating whether to measure the label offset from the feature geometry.
   *
   */
  isOffsetFromFeatureGeometry?: boolean;
  /**
   * Gets or sets the name of the key number group to use for key numbering the labels.
   *
   */
  keyNumberGroupName?: null | string;
  /**
   * Gets or sets the label buffer. Increase buffer to stop labels from being placed too close to each other.
   *
   */
  labelBuffer?: number;
  /**
   * Gets or sets a value indicating whether to label only the largest polygon in a compound polygon feature.
   *
   */
  labelLargestPolygon?: boolean;
  /**
   * Gets or sets the label priority. Label priority controls approximate placement order.
   *
   */
  labelPriority?: number;
  /**
   * Gets or sets the label stacking properties for a layer.
   *
   */
  labelStackingProperties?: null | CIMMaplexLabelStackingProperties;
  /**
   * Gets or sets the line feature type.
   *
   */
  lineFeatureType?: MaplexLineFeatureType;
  /**
   * Gets or sets the line placement method.
   *
   */
  linePlacementMethod?: MaplexLinePlacementMethod;
  /**
   * Gets or sets the maximum character spacing. Character spacing may be increased up to this limit.
   *
   */
  maximumCharacterSpacing?: number;
  /**
   * Gets or sets the maximum distance that a label is allowed to overrun the end of its feature.
   *
   */
  maximumLabelOverrun?: number;
  /**
   * Gets or sets the label overrun unit.
   */
  maximumLabelOverrunUnit?: MaplexUnit;
  /**
   * Gets or sets maximum word spacing. The word spacing may be increased up to this limit.
   */
  maximumWordSpacing?: number;
  /**
   * Gets or sets minimum clearance between street label and street end.
   */
  minimumEndOfStreetClearance?: number;
  /**
   * Gets or sets minimum feature size unit.
   */
  minimumFeatureSizeUnit?: MaplexUnit;
  /**
   * Gets or sets the interval that must elapse before label is repeated.
   */
  minimumRepetitionInterval?: number;
  /**
   * Gets or sets the minimum size of a line or area feature for it to be labeled.
   */
  minimumSizeForLabeling?: number;
  /**
   * Gets or sets the option for labeling multi-part shapes.
   */
  multiPartOption?: MaplexMultiPartOption;
  /**
   * Gets or sets a value indicating whether to not remove the label if no position is found.
   */
  neverRemoveLabel?: boolean;
  /**
   * Gets or sets the offset along line properties for a layer.
   */
  offsetAlongLineProperties?: null | CIMMaplexOffsetAlongLineProperties;
  /**
   * Gets or sets the properties which control placement of a label around point feature.
   */
  pointExternalZonePriorities?: null | CIMMaplexExternalZonePriorities;
  /**
   * Gets or sets the point placement method.
   */
  pointPlacementMethod?: MaplexPointPlacementMethod;
  /**
   * Gets or sets the polygon anchor point type.
   */
  polygonAnchorPointType?: MaplexAnchorPointType;
  /**
   * Gets or sets the feature weight for the boundary of the polygon.
   */
  polygonBoundaryWeight?: number;
  /**
   * Gets or sets the placement priorities associated with zones external to the polygon.
   */
  polygonExternalZones?: null | CIMMaplexExternalZonePriorities;
  /**
   * Gets or sets the polygon feature type.
   */
  polygonFeatureType?: MaplexPolygonFeatureType;
  /**
   * Gets or sets the placement priorities associated with zones internal to the polygon.
   */
  polygonInternalZones?: null | CIMMaplexInternalZonePriorities;
  /**
   * Gets or sets the polygon placement method.
   */
  polygonPlacementMethod?: MaplexPolygonPlacementMethod;
  /**
   * Gets or sets a value indicating whether there is a preference to place the label horizontally.
   */
  preferHorizontalPlacement?: boolean;
  /**
   * Gets or sets a value indicating whether there is a preference for placing a line label near a junction.
   */
  preferLabelNearJunction?: boolean;
  /**
   * Gets or sets the preferred clearance for placing a line label near a junction.
   */
  preferLabelNearJunctionClearance?: number;
  /**
   * Gets or sets a value indicating whether there is a preference for placing a line label near the map border.
   */
  preferLabelNearMapBorder?: boolean;
  /**
   * Gets or sets the preferred clearance for placing a line label near the map border.
   */
  preferLabelNearMapBorderClearance?: number;
  /**
   * Gets or sets the preferred clearance between street label and street end.
   */
  preferredEndOfStreetClearance?: number;
  /**
   * Gets or sets the primary offset between label and symbol.
   */
  primaryOffset?: number;
  /**
   * Gets or sets the unit of the primary offset.
   */
  primaryOffsetUnit?: MaplexUnit;
  /**
   * Gets or sets a value indicating whether extra line breaks are removed from the label text.
   */
  removeExtraLineBreaks?: boolean;
  /**
   * Gets or sets a value indicating whether extra white space characters are removed from the label text.
   */
  removeExtraWhiteSpace?: boolean;
  /**
   * Gets or sets a value indicating whether to enable the repetition of label along line feature.
   */
  repeatLabel?: boolean;
  /**
   * Gets or sets the label repetition interval unit.
   */
  repetitionIntervalUnit?: MaplexUnit;
  /**
   * Gets or sets the label rotation properties.
   */
  rotationProperties?: null | CIMMaplexRotationProperties;
  /**
   * Gets or sets the secondary offset between label and symbol.
   */
  secondaryOffset?: number;
  /**
   * Gets or sets the secondary offset maximum.
   */
  secondaryOffsetMaximum?: number;
  /**
   * Gets or sets the secondary offset minimum.
   */
  secondaryOffsetMinimum?: number;
  /**
   * Gets or sets a value indicating whether to spread label characters along line features.
   */
  spreadCharacters?: boolean;
  /**
   * Gets or sets a value indicating whether to whether to spread words along line features.
   */
  spreadWords?: boolean;
  /**
   * Gets or sets the priority of a placement strategy when placing text.
   */
  strategyPriorities?: null | CIMMaplexStrategyPriorities;
  /**
   * Gets or sets a value indicating whether to remove duplicate labels that lie within a specified distance of each other.
   */
  thinDuplicateLabels?: boolean;
  /**
   * Gets or sets the distance used to control the thinning of duplicate labels.
   */
  thinningDistance?: number;
  /**
   * Gets or sets the thinning distance unit.
   */
  thinningDistanceUnit?: MaplexUnit;
  /**
   * Gets or sets the marker character used by the truncation strategy.
   */
  truncationMarkerCharacter?: null | string;
  /**
   * Gets or sets the minimum length of a label used by the truncation strategy.
   */
  truncationMinimumLength?: number;
  /**
   * Gets or sets the preferred characters used by the truncation strategy. These characters will be removed as needed.
   */
  truncationPreferredCharacters?: null | string;
  /**
   * Gets or sets a value indicating whether to use the exact polygon outline of a symbol when measuring the label offset.
   */
  useExactSymbolOutline?: boolean;
  /**
   * Gets or sets the excluded characters used by the truncation strategy. These characters will never be removed by truncation.
   */
  truncationExcludedCharacters?: null | string;
  /**
   * Gets or sets the inset value for perimeter polygon anchor leader anchor points.
   */
  polygonAnchorPointPerimeterInset?: number;
  /**
   * Gets or sets the unit of the inset value for perimeter polygon anchor points.
   */
  polygonAnchorPointPerimeterInsetUnit?: MaplexUnit;
}
/**
 * Represents the properties required for authoring an Arcade expression.
 */
export interface CIMExpressionInfo {
  /**
   * Gets or sets the human readable text that describes the expression.
   */
  title?: null | string;
  /**
   * Gets or sets the Arcade expression used to evaluate and return the value that a property expects.
   */
  expression?: null | string;
  /**
   * Gets or sets the Name of the expression.
   */
  name?: null | string;
  /**
   * Gets or sets the ReturnType of the expression.
   */
  returnType?: ExpressionReturnType;
}
/**
 * Represents Maplex label stacking properties.
 *
 */
export interface CIMMaplexLabelStackingProperties {
  /**
   * Gets or sets the stacking alignment.
   */
  stackAlignment?: MaplexStackingAlignment;
  /**
   * Gets or sets the maximum number of lines.
   */
  maximumNumberOfLines?: number;
  /**
   * Gets or sets the minimum number of characters per line.
   */
  minimumNumberOfCharsPerLine?: number;
  /**
   * Gets or sets the maximum number of characters per line.
   */
  maximumNumberOfCharsPerLine?: number;
  /**
   * Gets or sets the stacking separators.
   */
  separators?: CIMMaplexStackingSeparator[] | null;
  /**
   * Gets or sets a value indicating whether leading and trailing stacking separators are trimmed from the label string.
   */
  trimStackingSeparators?: boolean;
}
/**
 * Represents a Maplex stacking separator.
 *
 */
export interface CIMMaplexStackingSeparator {
  /**
   * Gets or sets the separator as a string of one character.
   */
  separator?: null | string;
  /**
   * Gets or sets a value indicating whether or not the separator should be visible after stacking.
   */
  visible?: boolean;
  /**
   * Gets or sets a value indicating whether or not to force a split at every instance of the separator.
   */
  splitForced?: boolean;
  /**
   * Gets or sets a value indicating whether or not to split after the separator.
   */
  splitAfter?: boolean;
}
/**
 * Represents Maplex offset along the line properties.
 *
 */
export interface CIMMaplexOffsetAlongLineProperties {
  /**
   * Gets or sets the placement method.
   */
  placementMethod?: MaplexOffsetAlongLineMethod;
  /**
   * Gets or sets the label anchor point for positioning along the line.
   */
  labelAnchorPoint?: MaplexLabelAnchorPoint;
  /**
   * Gets or sets the distance along the line.
   */
  distance?: number;
  /**
   * Gets or sets the tolerance.
   */
  tolerance?: number;
  /**
   * Gets or sets the distance unit.
   */
  distanceUnit?: MaplexUnit;
  /**
   * Gets or sets a value indicating whether or not to use the line direction.
   */
  useLineDirection?: boolean;
}
/**
 * Represents Maplex external zone priorities.
 *
 */
export interface CIMMaplexExternalZonePriorities {
  /**
   * Gets or sets priority for this position.
   */
  aboveLeft?: number;
  /**
   * Gets or sets priority for this position.
   */
  aboveCenter?: number;
  /**
   * Gets or sets priority for this position.
   */
  aboveRight?: number;
  /**
   * Gets or sets priority for this position.
   */
  centerRight?: number;
  /**
   * Gets or sets priority for this position.
   */
  belowRight?: number;
  /**
   * Gets or sets priority for this position.
   */
  belowCenter?: number;
  /**
   * Gets or sets priority for this position.
   */
  belowLeft?: number;
  /**
   * Gets or sets priority for this position.
   */
  centerLeft?: number;
  /**
   * Gets or sets priority for this position.
   */
  center?: number;
}
/**
 * Represents Maplex internal zone priorities.
 *
 */
export interface CIMMaplexInternalZonePriorities {
  /**
   * Gets or sets priority for this position.
   */
  aboveLeft?: number;
  /**
   * Gets or sets priority for this position.
   */
  aboveCenter?: number;
  /**
   * Gets or sets priority for this position.
   */
  aboveRight?: number;
  /**
   * Gets or sets priority for this position.
   */
  centerRight?: number;
  /**
   * Gets or sets priority for this position.
   */
  belowRight?: number;
  /**
   * Gets or sets priority for this position.
   */
  belowCenter?: number;
  /**
   * Gets or sets priority for this position.
   */
  belowLeft?: number;
  /**
   * Gets or sets priority for this position.
   */
  centerLeft?: number;
  /**
   * Gets or sets priority for this position.
   */
  center?: number;
}
/**
 * Represents Maplex rotation properties.
 *
 */
export interface CIMMaplexRotationProperties {
  /**
   * Gets or sets a value indicating whether to enable rotation.
   */
  enable?: boolean;
  /**
   * Gets or sets the rotation type.
   */
  rotationType?: MaplexLabelRotationType;
  /**
   * Gets or sets the rotation field to get values from.
   */
  rotationField?: null | string;
  /**
   * Gets or sets a value indicating whether to place the label perpendicular to the angle.
   */
  perpendicularToAngle?: boolean;
  /**
   * Gets or sets a value indicating whether or not to align the label to the angle.
   */
  alignLabelToAngle?: boolean;
  /**
   * Gets or sets the alignment type.
   */
  alignmentType?: MaplexRotationAlignmentType;
  /**
   * Gets or sets additional angle to add to the data value.
   */
  additionalAngle?: number;
  /**
   * Gets or sets ExpressionInfo that contains the Arcade expression that returns rotation as a number.
   *  When both RotationField and RotationExpressionInfo are present RotationExpressionInfo is used.
   */
  rotationExpressionInfo?: null | CIMExpressionInfo;
}
/**
 * Represents Maplex strategy priorities.
 *
 */
export interface CIMMaplexStrategyPriorities {
  /**
   * Gets or sets the priority for stacking.
   */
  stacking?: number;
  /**
   * Gets or sets the priority for overrun.
   */
  overrun?: number;
  /**
   * Gets or sets the priority for font compression.
   */
  fontCompression?: number;
  /**
   * Gets or sets the priority for font reduction.
   */
  fontReduction?: number;
  /**
   * Gets or sets the priority for abbreviation.
   */
  abbreviation?: number;
}
/**
 * Represents standard label engine label placement properties.
 *
 */
export interface CIMStandardLabelPlacementProperties {
  /**
   * Gets or sets the feature type being labeled.
   */
  featureType?: LabelFeatureType;
  /**
   * Gets or sets the feature weight.
   */
  featureWeight?: StandardFeatureWeight;
  /**
   * Gets or sets the label weight.
   */
  labelWeight?: StandardLabelWeight;
  /**
   * Gets or sets the option for number of labels.
   */
  numLabelsOption?: StandardNumLabelsOption;
  /**
   * Gets or sets the line label position.
   */
  lineLabelPosition?: null | CIMStandardLineLabelPosition;
  /**
   * Gets or sets the line label priorities.
   */
  lineLabelPriorities?: null | CIMStandardLineLabelPriorities;
  /**
   * Gets or sets the point placement method.
   */
  pointPlacementMethod?: StandardPointPlacementMethod;
  /**
   * Gets or sets the point placement priorities.
   */
  pointPlacementPriorities?: null | CIMStandardPointPlacementPriorities;
  /**
   * Gets or sets an array of point placement angles.
   */
  pointPlacementAngles?: number[] | null;
  /**
   * Gets or sets the buffer ratio.
   */
  bufferRatio?: number;
  /**
   * Gets or sets the line offset.
   */
  lineOffset?: number;
  /**
   * Gets or sets the maximum distance from target.
   */
  maxDistanceFromTarget?: number;
  /**
   * Gets or sets the rotation type.
   */
  rotationType?: StandardLabelRotationType;
  /**
   * Gets or sets the rotation field.
   */
  rotationField?: null | string;
  /**
   * Gets or sets a value indicating whether or not to place the label perpendicular to the angle.
   */
  perpendicularToAngle?: boolean;
  /**
   * Gets or sets the polygon placement method.
   */
  polygonPlacementMethod?: StandardPolygonPlacementMethod;
  /**
   * Gets or sets a value indicating whether or not to place the label only inside a polygon.
   */
  placeOnlyInsidePolygon?: boolean;
  /**
   * Gets or sets a value indicating whether or not to allow overlapping labels.
   */
  allowOverlappingLabels?: boolean;
}
/**
 * Represents standard label engine line label position.
 *
 */
export interface CIMStandardLineLabelPosition {
  /**
   * Gets or sets a value indicating whether or not to produce curved labels.
   */
  produceCurvedLabels?: boolean;
  /**
   * Gets or sets a value indicating whether or not to allow placement above lines.
   */
  above?: boolean;
  /**
   * Gets or sets a value indicating whether or not to allow placement below lines.
   */
  below?: boolean;
  /**
   * Gets or sets a value indicating whether or not to allow placement on top of lines.
   */
  onTop?: boolean;
  /**
   * Gets or sets a value indicating whether or not to allow placement to the left of the line.
   */
  left?: boolean;
  /**
   * Gets or sets a value indicating whether or not to allow placement to the right of the line.
   */
  right?: boolean;
  /**
   * Gets or sets a value indicating whether or not to allow along lines at the best position.
   */
  inLine?: boolean;
  /**
   * Gets or sets a value indicating whether or not to allow placement at the start of lines.
   */
  atStart?: boolean;
  /**
   * Gets or sets a value indicating whether or not to allow placement at the end of lines.
   */
  atEnd?: boolean;
  /**
   * Gets or sets a value indicating whether or not to allow placement parallel to lines.
   */
  parallel?: boolean;
  /**
   * Gets or sets a value indicating whether or not to allow placement perpendicular to lines.
   */
  perpendicular?: boolean;
  /**
   * Gets or sets a value indicating whether or not to allow placement horizontally.
   */
  horizontal?: boolean;
  /**
   * Gets or sets a the offset from the line.
   */
  offset?: number;
}
/**
 * Represents standard label engine line label priorities.
 *
 */
export interface CIMStandardLineLabelPriorities {
  /**
   * Gets or sets a the label position priority for above and before the line.
   */
  aboveBefore?: number;
  /**
   * Gets or sets a the label position priority for above and at the start of the line.
   */
  aboveStart?: number;
  /**
   * Gets or sets a the label position priority for above and along the line.
   */
  aboveAlong?: number;
  /**
   * Gets or sets a the label position priority for above and at the end of the line.
   */
  aboveEnd?: number;
  /**
   * Gets or sets a the label position priority for above and after the line.
   */
  aboveAfter?: number;
  /**
   * Gets or sets a the label position priority for centered and before the line.
   */
  centerBefore?: number;
  /**
   * Gets or sets a the label position priority for centered and at the start of the line.
   */
  centerStart?: number;
  /**
   * Gets or sets a the label position priority for centered and along the line.
   */
  centerAlong?: number;
  /**
   * Gets or sets a the label position priority for centered and at the end of the line.
   */
  centerEnd?: number;
  /**
   * Gets or sets a the label position priority for centered and after the line.
   */
  centerAfter?: number;
  /**
   * Gets or sets a the label position priority for below and before the line.
   */
  belowBefore?: number;
  /**
   * Gets or sets a the label position priority for below and at the start of the line.
   */
  belowStart?: number;
  /**
   * Gets or sets a the label position priority for below and along the line.
   */
  belowAlong?: number;
  /**
   * Gets or sets a the label position priority for below and at the end of the line.
   */
  belowEnd?: number;
  /**
   * Gets or sets a the label position priority for below and after the line.
   */
  belowAfter?: number;
}
/**
 * Represents standard label engine point placement priorities.
 *
 */
export interface CIMStandardPointPlacementPriorities {
  /**
   * Gets or sets a the label position priority for the above left position.
   */
  aboveLeft?: number;
  /**
   * Gets or sets a the label position priority for the above center position.
   */
  aboveCenter?: number;
  /**
   * Gets or sets a the label position priority for the above right position.
   */
  aboveRight?: number;
  /**
   * Gets or sets a the label position priority for the center left position.
   */
  centerLeft?: number;
  /**
   * Gets or sets a the label position priority for the center right position.
   */
  centerRight?: number;
  /**
   * Gets or sets a the label position priority for the below left position.
   */
  belowLeft?: number;
  /**
   * Gets or sets a the label position priority for the below center position.
   */
  belowCenter?: number;
  /**
   * Gets or sets a the label position priority for the below right position.
   */
  belowRight?: number;
}
/**
 * Represents a symbol reference.
 *
 */
export interface CIMSymbolReference {
  /**
   * Gets or sets the primitive overrides. Typically set by renderers at draw time.
   */
  primitiveOverrides?: CIMPrimitiveOverride[] | null;
  /**
   * Gets or sets the style path. Reserved for future use.
   */
  stylePath?: null | string;
  /**
   * Gets or sets the symbol.
   */
  symbol?: null | CIMSymbol;
  /**
   * Gets or sets the symbol name.
   */
  symbolName?: null | string;
  /**
   * Gets or sets the minimum scale range the symbol reference should be displayed at.
   */
  minScale?: number;
  /**
   * Gets or sets the maximum scale range the symbol reference should be displayed at.
   */
  maxScale?: number;
  /**
   * Gets or sets an array of scale dependent sizes.
   */
  scaleDependentSizeVariation?: CIMScaleDependentSizeVariation[] | null;
  /**
   * Gets or sets the minimum distance at which symbols are visible. Objects closer than this don't get rendered.
   */
  minDistance?: number;
  /**
   * Gets or sets the maximum distance at which symbols are visible. Objects beyond this point don't get rendered.
   */
  maxDistance?: number;
}
/**
 * Represents a primitive override.
 *
 */
export interface CIMPrimitiveOverride {
  /**
   * Gets or sets the primitive name this override applies to.
   */
  primitiveName?: null | string;
  /**
   * Gets or sets the property name in the primitive this override applies to.
   */
  propertyName?: null | string;
  /**
   * Gets or sets the expression.
   */
  expression?: null | string;
  /**
   * Gets or sets ExpressionInfo that contains the Arcade expression that returns value as a number or a string depending on the PropertyName.
   */
  valueExpressionInfo?: null | CIMExpressionInfo;
}
/**
 * Represents a symbol. A symbol is used to describe how a geometric shape, such as that from a graphic or feature, is displayed.
 *
 */
export interface CIMSymbol {}
/**
 * Represents the scale dependent size variations for a symbol reference.
 *
 */
export interface CIMScaleDependentSizeVariation {
  /**
   * Gets or sets the scale the size is associated with.
   */
  scale?: number;
  /**
   * Gets or sets the size for the associated scale.
   */
  size?: number;
}
/**
 * Represents symbol layer masking.
 *
 */
export interface CIMSymbolLayerMasking {
  /**
   * Gets or sets the symbol layer identifiers.
   */
  symbolLayers?: CIMSymbolLayerIdentifier[] | null;
}
/**
 * Represents symbol layer identifier.
 *
 */
export interface CIMSymbolLayerIdentifier {
  /**
   * Gets or sets the symbol layer name.
   */
  symbolLayerName?: null | string;
}
/**
 * Represents a renderer.
 *
 */
export interface CIMRenderer {}
/**
 * Represents symbol layer drawing properties.
 *
 */
export interface CIMSymbolLayerDrawing {
  /**
   * Gets or sets the symbol layer identifiers.
   */
  symbolLayers?: CIMSymbolLayerIdentifier[] | null;
  /**
   * Gets or sets a value indicating whether symbol layer drawing is enabled.
   */
  useSymbolLayerDrawing?: boolean;
}
/**
 * Represents a technique for visually reducing large numbers of features in a map.
 */
export interface CIMFeatureReduction {
  /**
   * Gets or sets a value indicating whether feature reduction is enabled in the feature layer.
   */
  enabled?: boolean;
}
/**
 * Represents feature extrusion.
 *
 */
export interface CIMFeatureExtrusion {
  /**
   * Gets or sets the extrusion type.
   */
  extrusionType?: ExtrusionType;
  /**
   * Gets or sets the extrusion expression.
   */
  extrusionExpression?: null | string;
  /**
   * Gets or sets the feature layer's extrusion unit.
   */
  extrusionUnit?: null | LinearUnit;
  /**
   * Gets or sets the ExpressionInfo that contains Arcade expression that returns a numeric value.
   */
  extrusionExpressionInfo?: null | CIMExpressionInfo;
}
/**
 * Represents a linear unit of measure used by a Geometry or SpatialReference, or in measurement conversion functions.
 */
export interface LinearUnit {
  /**
   * Gets the well-known ID of the unit. If the unit is a custom unit, then the factory code will be 0.
   */
  factoryCode?: number;
  /**
   * Gets the well-known text of the unit.
   */
  wkt?: null | string;
  /**
   * Gets the name of the unit.
   */
  name?: null | string;
  /**
   * Gets the conversion factor of the unit.
   */
  conversionFactor?: number;
  /**
   * Gets the type of unit.
   */
  unitType?: UnitType;
  /**
   * Gets the meters per unit.
   */
  metersPerUnit?: number;
}
/**
 * Represents a feature table.
 *
 */
export interface CIMFeatureTable {
  /**
   * Gets or sets the definition expression that can subset the rows in the virtual table.
   */
  definitionExpression?: null | string;
  /**
   * Gets or sets the Name of definition expression.
   */
  definitionExpressionName?: null | string;
  /**
   * Gets or sets the definition filter choices.
   */
  definitionFilterChoices?: CIMDefinitionFilter[] | null;
  /**
   * Gets or sets the name of the attribute field that will be used as a label that represents each row in the table. The display field must be able to be represented as a string (string or numeric).
   */
  displayField?: null | string;
  /**
   * Gets or sets a value indicating whether or not the table can be edited.
   */
  editable?: boolean;
  /**
   * Gets or sets the relates.
   */
  relates?: CIMRelateInfoBase[] | null;
  /**
   * Gets or sets the field descriptions. Field descriptions for fields may only be written if values are overridden from defaults.
   */
  fieldDescriptions?: CIMFieldDescription[] | null;
  /**
   * Gets or sets the time fields.
   */
  timeFields?: null | CIMTimeTableDefinition;
  /**
   * Gets or sets the time definition.
   */
  timeDefinition?: null | CIMTimeDataDefinition;
  /**
   * Gets or sets the time display definition.
   */
  timeDisplayDefinition?: null | CIMTimeDisplayDefinition;
  /**
   * Gets or sets the time definition fields.
   */
  timeDimensionFields?: null | CIMTimeDimensionDefinition;
  /**
   * Gets or sets the range definitions.
   */
  rangeDefinitions?: CIMRangeDefinition[] | null;
  /**
   * Gets or sets the active range name.
   */
  activeRangeName?: null | string;
  /**
   * Gets or sets a value indicating whether related data should be selected when creating a new selection.
   */
  selectRelatedData?: boolean;
  /**
   * Gets or sets the bind variables.
   */
  bindVariables?: CIMBindVariable[] | null;
  /**
   * Gets or sets the subtype value that should be used in the feature layer definition. This property is honored only when feature layer is a member of SubtypeLayer.
   */
  subtypeValue?: number;
  /**
   * Gets or sets a value indicating whether or not the SubtypeValue should be used.
   */
  useSubtypeValue?: boolean;
  /**
   * Gets or sets the expression information used for coming up with a string that represents a row or a feature.
   */
  displayExpressionInfo?: null | CIMExpressionInfo;
  /**
   * Gets or sets the URI of the selection set for the table.
   */
  selectionSetURI?: null | string;
  /**
   * Gets or sets floor-aware properties for the layer/table used in floor filtering.
   */
  floorAwareTableProperties?: null | CIMFloorAwareTableProperties;
  /**
   * Gets or sets the route identifier field of a route feature class.
   *
   * This property will only be set for route feature classes, namely line and polyline feature classes that are m-aware.
   */
  routeIDFieldName?: null | string;
  /**
   * Gets or sets the data connection.
   */
  dataConnection?: null | CIMDataConnection;
  /**
   * Gets or sets an area that can be used to subset the rows in the virtual table.
   */
  studyArea?: null | Envelope;
  /**
   * Gets or sets the study area spatial relationship.
   */
  studyAreaSpatialRel?: EsriSpatialRelEnum;
  /**
   * Gets or sets the search order option.
   */
  searchOrder?: EsriSearchOrder;
  /**
   * Gets or sets a value indicating whether the data source is licensed.
   */
  isLicensedDataSource?: boolean;
  /**
   * Gets or sets the DefinitionSet for the table.
   */
  definitionSetURI?: null | string;
}
/**
 * Contains filters so that only features satisfying these definitions will be displayed.
 *
 */
export interface CIMDefinitionFilter {
  /**
   * Gets or sets the name of the Definition Filter item.
   */
  name?: null | string;
  /**
   * Gets or sets the definition expression to filter features in the dataset.
   */
  definitionExpression?: null | string;
}
/**
 * Represents relate base.
 *
 */
export interface CIMRelateInfoBase {
  /**
   * Gets or sets the relate data connection.
   */
  dataConnection?: null | CIMDataConnection;
  /**
   * Gets or sets the foreign key.
   */
  foreignKey?: null | string;
  /**
   * Gets or sets the primary key.
   */
  primaryKey?: null | string;
  /**
   * Gets or sets the relate cardinality.
   */
  cardinality?: EsriRelCardinality;
  /**
   * Gets or sets the name.
   */
  name?: null | string;
}
/**
 * Represents a field description.
 *
 */
export interface CIMFieldDescription {
  /**
   * Gets or sets the field alias.
   */
  alias?: null | string;
  /**
   * Gets or sets the field name.
   */
  fieldName?: null | string;
  /**
   * Gets or sets a value indicating whether the field is highlighted.
   */
  highlight?: boolean;
  /**
   * Gets or sets the number format.
   */
  numberFormat?: null | CIMNumberFormat;
  /**
   * Gets or sets a value indicating whether the field is read only.
   */
  readOnly?: boolean;
  /**
   * Gets or sets a value indicating whether the field is visible.
   */
  visible?: boolean;
  /**
   * Gets or sets a value indicating whether the field value is a ratio (used only by geoprocessing).
   */
  valueAsRatio?: boolean;
  /**
   * Gets or sets a value indicating whether the values from this field should be included in the search.
   */
  searchable?: boolean;
  /**
   * Gets or sets search mode to use when searching for values in this field.
   */
  searchMode?: DataSearchMode;
}
/**
 * Represents a number format.
 *
 */
export interface CIMNumberFormat {}
/**
 * Represents a time table definition.
 *
 */
export interface CIMTimeTableDefinition {
  /**
   * Gets or sets the start time field.
   */
  startTimeField?: null | string;
  /**
   * Gets or sets the end time field.
   */
  endTimeField?: null | string;
  /**
   * Gets or sets the time value format.
   */
  timeValueFormat?: null | string;
  /**
   * Gets or sets the track ID field.
   */
  trackIDField?: null | string;
}
/**
 * Represents a time data definition.
 *
 */
export interface CIMTimeDataDefinition {
  /**
   * Gets or sets a value indicating whether or not to use time for animation purposes.
   */
  useTime?: boolean;
  /**
   * Gets or sets the time reference.
   */
  timeReference?: null | TimeReference;
  /**
   * Gets or sets the custom time extent.
   */
  customTimeExtent?: null | TimeExtent;
  /**
   * Gets or sets a value indicating whether or not this dataset has live data.
   */
  hasLiveData?: boolean;
  /**
   * Gets or sets a value indicating whether the data regularly changes, so the extent needs recalculated.
   *
   */
  timeExtentCanChange?: boolean;
}
/**
 * Represents the time zone definition for a given date and time.
 */
export interface TimeReference {
  /**
   * Gets or sets the windows id for the time zone.
   */
  timeZoneNameID?: null | string;
  /**
   * Gets or sets a value indicating if the time reference should honor daylight savings time.
   */
  respectsDaylightSavingTime?: boolean;
  /**
   * Gets or sets a value indicating if the time reference should respect dynamic rules for adjusting with daylight savings time for specific years.
   */
  respectsDynamicAdjustmentRules?: boolean;
}
/**
 * Represents an extent of time defined by a start and end date.
 */
export interface TimeExtent {
  /**
   * Gets or sets the time zone definition of the time.
   */
  timeReference?: null | TimeReference;
  /**
   * Gets or sets the start time of the extent.
   */
  startTime?: string;
  /**
   * Gets or sets the end time of the extent.
   */
  endTime?: string;
  /**
   * Gets or sets a value indicating if the time extent is empty.
   */
  empty?: boolean;
  /**
   * Gets or sets a value indicating if the extent contains a start time. If false the time extent has no lower bound.
   */
  startTimeSpecified?: boolean;
  /**
   * Gets or sets a value indicating if the extent contains an end time. If false the time extent has no upper bound.
   */
  endTimeSpecified?: boolean;
}
/**
 * Represents a time display definition.
 *
 */
export interface CIMTimeDisplayDefinition {
  /**
   * Gets or sets a value indicating whether time is cumulative.
   */
  cumulative?: boolean;
  /**
   * Gets or sets the time interval.
   */
  timeInterval?: number;
  /**
   * Gets or sets the time interval units.
   */
  timeIntervalUnits?: EsriTimeUnits;
  /**
   * Gets or sets the time offset.
   */
  timeOffset?: number;
  /**
   * Gets or sets the time offset units.
   */
  timeOffsetUnits?: EsriTimeUnits;
  /**
   * Gets or sets a cached set of unique OLE date values.
   */
  uniqueTimes?: number[] | null;
}
/**
 * Represents a time dimension definition.
 *
 */
export interface CIMTimeDimensionDefinition {
  /**
   * Gets or sets the time dimension name.
   */
  timeDimensionName?: null | string;
  /**
   * Gets or sets the time dimension format.
   */
  timeDimensionFormat?: null | string;
}
/**
 * Represents a range definition.
 *
 */
export interface CIMRangeDefinition {
  /**
   * Gets or sets the name.
   */
  name?: null | string;
  /**
   * Gets or sets the field name.
   */
  fieldName?: null | string;
  /**
   * Gets or sets the current range.
   */
  currentRange?: null | CIMRange;
  /**
   * Gets or sets the custom full extent.
   */
  customFullExtent?: null | CIMRange;
  /**
   * Gets or sets a value indicating whether or not range is exclusion.
   */
  isExclusion?: boolean;
  /**
   * Gets or sets ExpressionInfo that contains the Arcade expression that returns a string representing range alias value.
   */
  aliasExpressionInfo?: null | CIMExpressionInfo;
}
/**
 * Represents a range.
 *
 */
export interface CIMRange {
  /**
   * Gets or sets the minimum.
   */
  min?: number;
  /**
   * Gets or sets the maximum.
   */
  max?: number;
}
/**
 * Represents a bind variable.
 */
export interface CIMBindVariable {
  /**
   * Gets or sets the name of the variable. The name must be unique among all variables.
   */
  variableName?: null | string;
  /**
   * Gets or sets the alias of the variable.
   */
  alias?: null | string;
  /**
   * Gets or sets the type of the variable.
   */
  dataType?: BindVariableType;
}
/**
 * Represents floor-aware properties for the layer/table used in floor filtering.
 *
 */
export interface CIMFloorAwareTableProperties {
  /**
   * Gets or sets rank or "level" at which the layer/table participates in filtering for Indoors or floor-aware layers/tables.
   */
  floorFilterRank?: FloorFilterRank;
  /**
   * Gets or sets the name of the field that carries the floor value used for floor filtering.
   */
  floorField?: null | string;
}
/**
 * An envelope is an axis-aligned box described by the coordinates
 * of the lower left corner and the coordinates of the upper right corner.   To create an envelope use the
 * EnvelopeBuilderEx object.
 */
export interface Envelope {
  /**
   * Gets a value indicating if the geometry has Z.
   */
  hasZ?: boolean;
  /**
   * Gets a value indicating if the geometry has M.
   */
  hasM?: boolean;
  /**
   * Gets a value indicating if the geometry has ID.
   */
  hasID?: boolean;
  /**
   * Gets the spatial reference of this instance.
   */
  spatialReference?: null | SpatialReference;
  /**
   * Gets the dimension of the geometry.
   */
  dimension?: number;
  /**
   * Gets the GeometryType of this instance.  Always returns Envelope.
   */
  geometryType?: GeometryType;
  /**
   * Gets the point count of this instance. Always returns 5.
   */
  pointCount?: number;
  /**
   * Gets the X minimum of this instance.
   */
  xMin?: number;
  /**
   * Gets the Y minimum of this instance.
   */
  yMin?: number;
  /**
   * Gets the X maximum of this instance.
   */
  xMax?: number;
  /**
   * Gets the Y maximum of this instance.
   */
  yMax?: number;
  /**
   * Gets the Z minimum of this instance.
   */
  zMin?: number;
  /**
   * Gets the Z maximum of this instance.
   */
  zMax?: number;
  /**
   * Gets the M minimum of this instance.
   */
  mMin?: number;
  /**
   * Gets the M maximum of this instance.
   */
  mMax?: number;
  /**
   * Gets the ID minimum of this instance.
   */
  idMin?: number;
  /**
   * Gets the ID maximum of this instance.
   */
  idMax?: number;
  /**
   * Gets the center of this instance as a Coordinate2D.
   */
  centerCoordinate?: Coordinate2D;
  /**
   * Gets the center of this instance as a MapPoint.
   */
  center?: null | MapPoint;
  /**
   * Gets the height of this instance.
   */
  height?: number;
  /**
   * Gets the width of this instance.
   */
  width?: number;
  /**
   * Gets the depth of this instance.
   */
  depth?: number;
  /**
   * Gets the perimeter length of this instance.
   */
  length?: number;
  /**
   * Gets the 3D length of the perimeter of this instance.
   */
  length3D?: number;
  /**
   * Gets the area of this instance.
   */
  area?: number;
  /**
   * Gets the minimum enclosing envelope of this instance. Returns null if this geometry has IsEmpty = true.
   */
  extent?: null | Envelope;
  /**
   * Gets a value indicating whether or not the geometry is empty.
   */
  isEmpty?: boolean;
}
/**
 * Class representing a spatial reference.
 */
export interface SpatialReference {
  /**
   * Gets the well-known ID for this instance.
   */
  wkid?: number;
  /**
   * Gets the latest well-known ID for this instance.
   */
  latestWkid?: number;
  /**
   * Gets the underlying geographic coordinate system for this instance.
   * If this instance is a geographic coordinate system,
   * a pointer to this instance is returned.
   */
  gcs?: null | SpatialReference;
  /**
   * Gets the well-known text for this instance.
   */
  wkt?: null | string;
  /**
   * Gets the name of the spatial reference.
   */
  name?: null | string;
  /**
   * Gets the geographic coordinate system well-known ID.
   */
  gcsWkid?: number;
  /**
   * Gets the geographic coordinate system well-known text.
   */
  gcsWkt?: null | string;
  /**
   * Gets the vertical coordinate system well-known ID.
   */
  vcsWkid?: number;
  /**
   * Gets the vertical coordinate system well-known text.
   */
  vcsWkt?: null | string;
  /**
   * Determines if a vertical coordinate system has been defined.
   */
  hasVcs?: boolean;
  /**
   * Gets the XY Tolerance.
   */
  xyTolerance?: number;
  /**
   * Gets the XY Resolution.
   */
  xyResolution?: number;
  /**
   * Gets the Z Tolerance.
   */
  zTolerance?: number;
  /**
   * Gets the M Tolerance.
   */
  mTolerance?: number;
  /**
   * Gets the XY Scale.
   */
  xyScale?: number;
  /**
   * Gets the Z Scale.
   */
  zScale?: number;
  /**
   * Gets the M Scale.
   */
  mScale?: number;
  /**
   * Gets the false X.
   */
  falseX?: number;
  /**
   * Gets the false Y.
   */
  falseY?: number;
  /**
   * Gets the false Z.
   */
  falseZ?: number;
  /**
   * Gets the false M.
   */
  falseM?: number;
  /**
   * Gets the left longitude value of the geographic coordinate system.
   */
  leftLongitude?: number;
  /**
   * Gets the right longitude value of the geographic coordinate system.
   */
  rightLongitude?: number;
  /**
   * Gets the HighPrecision flag of this instance.
   */
  isHighPrecision?: boolean;
  /**
   * Gets the units that the spatial reference coordinates are in.
   */
  unit?: null | Unit;
  /**
   * Gets the units that the spatial reference z-coordinates are in.
   */
  zUnit?: null | Unit;
  /**
   * Gets the central meridian of the projected coordinate system.
   */
  centralMeridian?: number;
  /**
   * Gets if this is a geographic coordinate system.
   */
  isGeographic?: boolean;
  /**
   * Gets if this is a projected coordinate system.
   */
  isProjected?: boolean;
  /**
   * Gets if this is an image coordinate system.
   */
  isImage?: boolean;
  /**
   * Gets if this is the unknown coordinate system.
   */
  isUnknown?: boolean;
  /**
   * Gets if this is instance is pannable.
   */
  isPannable?: boolean;
  /**
   * Gets the square domain extent of the spatial reference.
   */
  domain?: null | Envelope;
  /**
   * Gets the horizontal datum of this spatial reference.
   */
  datum?: null | Datum;
}
/**
 * A common base class between all units, linear, area and angular units.
 */
export interface Unit {
  /**
   * Gets the well-known ID of the unit. If the unit is a custom unit, then the factory code will be 0.
   */
  factoryCode?: number;
  /**
   * Gets the well-known text of the unit.
   */
  wkt?: null | string;
  /**
   * Gets the name of the unit.
   */
  name?: null | string;
  /**
   * Gets the conversion factor of the unit.
   */
  conversionFactor?: number;
  /**
   * Gets the type of unit.
   */
  unitType?: UnitType;
}
/**
 * Describes the horizontal datum of a geographic coordinate system. It is returned from Datum.
 */
export interface Datum {
  /**
   * Gets the well-known ID of this horizontal datum.
   */
  wkid?: number;
  /**
   * Gets the well-known ID of the spheroid of this horizontal datum.
   */
  spheroidWkid?: number;
  /**
   * Gets the length of the semi-major axis of the spheroid of this horizontal datum.
   */
  spheroidSemiMajorAxis?: number;
  /**
   * Gets the length of the semi-minor axis of the spheroid of this horizontal datum.
   */
  spheroidSemiMinorAxis?: number;
  /**
   * Gets the flattening ratio of the spheroid of this horizontal datum.
   */
  spheroidFlattening?: number;
  /**
   * Gets the name of this horizontal datum.
   */
  name?: null | string;
  /**
   * Gets the name of the spheroid of this horizontal datum.
   */
  spheroidName?: null | string;
}
/**
 * A lightweight structure that holds X and Y values.
 */
export interface Coordinate2D {
  /**
   * Gets or sets the X-component.
   */
  x?: number;
  /**
   * Gets or sets the Y-component.
   */
  y?: number;
  /**
   * Gets or sets the length of the Coordinate2D as a vector.
   */
  magnitude?: number;
  /**
   * Indicates if the Coordinate2D is empty.
   */
  isEmpty?: boolean;
}
/**
 * A MapPoint represents a single location in space. The location consists of X and Y values and optionally a Z and/or M value.
 * To create a MapPoint use the MapPointBuilderEx object.
 */
export interface MapPoint {
  /**
   * Gets a value indicating if the geometry has Z.
   */
  hasZ?: boolean;
  /**
   * Gets a value indicating if the geometry has M.
   */
  hasM?: boolean;
  /**
   * Gets a value indicating if the geometry has ID.
   */
  hasID?: boolean;
  /**
   * Gets the spatial reference of this instance.
   */
  spatialReference?: null | SpatialReference;
  /**
   * Gets the dimension of the geometry.
   */
  dimension?: number;
  /**
   * Gets the GeometryType of this instance.  Always returns Point.
   */
  geometryType?: GeometryType;
  /**
   * Gets the point count of the geometry. This is always 1.
   */
  pointCount?: number;
  /**
   * Gets the X-coordinate.
   */
  x?: number;
  /**
   * Gets the Y-coordinate.
   */
  y?: number;
  /**
   * Gets the Z-coordinate.
   */
  z?: number;
  /**
   * Gets the measure value.
   */
  m?: number;
  /**
   * Gets the ID value.
   */
  id?: number;
  /**
   * Gets a Coordinate2D structure with the X and Y values.
   */
  coordinate2D?: Coordinate2D;
  /**
   * Gets a Coordinate3D structure with the X, Y, and Z values.
   */
  coordinate3D?: Coordinate3D;
  /**
   * Gets the minimum enclosing envelope of the geometry.
   */
  extent?: null | Envelope;
  /**
   * Gets a value indicating whether or not the geometry is empty.
   */
  isEmpty?: boolean;
}
/**
 * A structure containing methods to manipulate 3D vertices and 3D vectors.
 */
export interface Coordinate3D {
  /**
   * Gets or sets the X-component.
   */
  x?: number;
  /**
   * Gets or sets the Y-component.
   */
  y?: number;
  /**
   * Gets or sets the Z-component.
   */
  z?: number;
  /**
   * Gets or sets the length of the Coordinate3D as a vector.
   */
  magnitude?: number;
  /**
   * Gets the inclination of the Coordinate3D. The inclination is measured in radians.
   */
  inclination?: number;
  /**
   * Gets the azimuth of the Coordinate3D. The azimuth is measured in radians.
   */
  azimuth?: number;
  /**
   * Indicates if the Coordinate3D is empty.
   */
  isEmpty?: boolean;
}
/**
 * Represents an editing template.
 *
 */
export interface CIMEditingTemplate {
  /**
   * Gets or sets the description.
   */
  description?: null | string;
  /**
   * Gets or sets the name.
   */
  name?: null | string;
  /**
   * Gets or sets the tags.
   */
  tags?: null | string;
  /**
   * Gets or sets the default tool GUID.
   */
  defaultToolGUID?: null | string;
  /**
   * Gets or sets the excluded tool GUIDs.
   */
  excludedToolGUIDs?: string[] | null;
  /**
   * Gets or sets the per-tool options.
   */
  toolOptions?: CIMEditingTemplateToolOptions[] | null;
}
/**
 * Represents editing template tool options.
 */
export interface CIMEditingTemplateToolOptions {
  /**
   * Gets or sets the tool ProgID.
   */
  toolProgID?: null | string;
  /**
   * Gets or sets the options for the specified creation tool.
   */
  options?: null | {
    [k: string]: unknown;
  };
}
/**
 * Represents an HTML pop-up format.
 *
 */
export interface CIMHtmlPopupFormat {
  /**
   * Gets or sets the redirect field.
   */
  htmlRedirectField?: null | string;
  /**
   * Gets or sets the redirect field prefix.
   */
  htmlRedirectFieldPrefix?: null | string;
  /**
   * Gets or sets the redirect field suffix.
   */
  htmlRedirectFieldSuffix?: null | string;
  /**
   * Gets or sets the XSL style sheet.
   */
  htmlXSLStyleSheet?: null | string;
  /**
   * Gets or sets a value indicating whether of not to hide the field name column.
   */
  htmlHideFieldNameColumn?: boolean;
  /**
   * Gets or sets a value indicating whether of not to use coded domain values.
   */
  htmlUseCodedDomainValues?: boolean;
  /**
   * Gets or sets the presentation style.
   */
  htmlPresentationStyle?: HtmlPopupStyle;
}
/**
 * Supports colors in the CIM model by providing low level access to properties common amongst all color types.
 */
export interface CIMColor {
  /**
   * Gets and sets alpha.
   */
  alpha?: number;
  /**
   * Gets or sets the color spaced used defined by an ICC color profile.
   */
  colorSpace?: null | CIMColorSpace;
  /**
   * Gets or sets the values for the color and alpha channels as defined by the color model. Alpha is the last value in the array for all colors.
   */
  values?: number[] | null;
}
/**
 * Supports colors spaces by providing a common base type for all color spaces.
 */
export interface CIMColorSpace {}
/**
 * Represents page definition.
 *
 */
export interface CIMPageDefinition {
  /**
   * Gets or sets the page field name. Show features where the value of this field either matches or doesn't match the current map series page name.
   * Match versus don't match is controlled by ExcludePages.
   */
  pageFieldName?: null | string;
  /**
   * Gets or sets a value indicating whether to exclude pages. Specify false to show features that match or true to show features that don't match.
   */
  excludePages?: boolean;
}
/**
 * Represents a display filter used to restrict the display of features across scale ranges.
 */
export interface CIMDisplayFilter {
  /**
   * Gets or sets the name of the display filter.
   */
  name?: null | string;
  /**
   * Gets or sets the where clause that filters features for a given scale range.
   */
  whereClause?: null | string;
  /**
   * Gets or sets the minimum scale for this display filter.
   */
  minScale?: number;
  /**
   * Gets or sets the maximum scale for this display filter.
   */
  maxScale?: number;
}
/**
 * Represents a layer elevation surface.
 *
 */
export interface CIMLayerElevationSurface {
  /**
   * Gets or sets Z offset.
   */
  offsetZ?: number;
  /**
   * Gets or sets the elevation surface layer URI.
   */
  elevationSurfaceLayerURI?: null | string;
}
/**
 * Represents 3D layer properties which contain properties used for 3D draw.
 *
 */
export interface CIM3DLayerProperties {
  /**
   * Gets or sets a value indicating whether shadows are enabled. If true, this layer's features contribute to shadows.
   */
  castShadows?: boolean;
  /**
   * Gets or sets a value indicating whether this layer is lit.
   */
  isLayerLit?: boolean;
  /**
   * Gets or sets the layer's face culling setting.
   */
  layerFaceCulling?: FaceCulling3D;
  /**
   * Gets or sets the maximum distance at which objects in view are visible. Objects beyond this point don't get rendered.
   */
  maxDistance?: number;
  /**
   * Gets or sets the maximum radius from the camera at which objects outside the view are loaded. Values are in Meters.
   */
  maxPreloadDistance?: number;
  /**
   * Gets or sets the minimum distance at which objects in view are visible. Objects closer than this don't get rendered.
   */
  minDistance?: number;
  /**
   * Gets or sets the minimum radius from the camera at which objects at which objects outside the view are loaded. Values are in Meters.
   */
  minPreloadDistance?: number;
  /**
   * Gets or sets the distance (in visible range) at which high resolution textures change to low resolution textures for objects outside the view. Range is 0 to 1.
   */
  preloadTextureCutoffHigh?: number;
  /**
   * Gets or sets the distance (in visible range) at which low resolution textures change to solid colors for objects outside the view. Range is 0 to 1.
   */
  preloadTextureCutoffLow?: number;
  /**
   * Gets or sets the distance (in visible range) at which the high resolution textures change to low resolution textures. Range is 0 to 1.
   */
  textureCutoffHigh?: number;
  /**
   * Gets or sets the distance (in visible range) at which the high resolution textures change to solid colors. Range is 0 to 1.
   */
  textureCutoffLow?: number;
  /**
   * Gets or sets the downscaling factor. All textures for this layer are downscaled by this additional factor on loading.
   */
  textureDownscalingFactor?: number;
  /**
   * Gets or sets a value indicating whether uncompressed textures are compressed using DXT5 at load time.
   */
  useCompressedTextures?: boolean;
  /**
   * Gets or sets the layer's vertical exaggeration.
   */
  verticalExaggeration?: number;
  /**
   * Gets or sets the layer's exaggeration mode.
   */
  exaggerationMode?: ExaggerationMode;
  /**
   * Gets or sets the layer's vertical unit.
   */
  verticalUnit?: null | Unit;
  /**
   * Gets or sets the depth priority of a 3D layer.
   */
  depthPriority?: number;
  /**
   * Gets or sets the layer's lighting setting.
   */
  lighting?: Lighting3D;
  /**
   * Gets or sets a value indicating whether true alpha is quantized to fully opaque or transparent when false, actual values are used in marker drawing.
   */
  optimizeMarkerTransparency?: boolean;
  /**
   * Gets or sets a value indicating whether to use depth writing for transparency. This should be set to true if anomalies are seen in drawing order of transparent features in the same feature class.
   */
  useDepthWritingForTransparency?: boolean;
}
/**
 * Represents a layer template.
 *
 */
export interface CIMLayerTemplate {
  /**
   * Gets or sets the layer template ID.
   */
  layerTemplateId?: null | string;
  /**
   * Gets or sets the layer template parameters.
   */
  parameters?: null | {
    [k: string]: unknown;
  };
}
/**
 * Represents pop-up info.
 *
 */
export interface CIMPopupInfo {
  /**
   * Gets or sets the title.
   */
  title?: null | string;
  /**
   * Gets or sets Arcade expressions that are referenced as fields in one or more elements in MediaInfos.
   */
  expressionInfos?: CIMExpressionInfo[] | null;
  /**
   * Gets or sets the media infos.
   */
  mediaInfos?: CIMMediaInfo[] | null;
  /**
   * Gets or sets the field name and the sort order by which the related records will be ordered.
   * The items are defined by the related field name (Format: RelationshipName\\FieldName) as the Keys and the sort order (Enum: Asc, Desc) as the Values.
   */
  relatedRecordSortOrder?: CIMStringMap[] | null;
  /**
   * Gets or sets the grid layout for the media infos.
   */
  gridLayout?: null | CIMPopupLayout;
  /**
   * Gets or sets the pop-up field descriptions.
   */
  fieldDescriptions?: CIMPopupFieldDescription[] | null;
}
/**
 * Represents media info.
 *
 */
export interface CIMMediaInfo {
  /**
   * Gets or sets the row.
   */
  row?: number;
  /**
   * Gets or sets the column.
   */
  column?: number;
  /**
   * Gets or sets the amount of time in RefreshRateUnit to wait between refreshing the media info.
   */
  refreshRate?: number;
  /**
   * Gets or sets the units for the amount of time to wait between refreshing the media.
   */
  refreshRateUnit?: EsriTimeUnits;
  /**
   * Gets or sets the row span.
   */
  rowSpan?: number;
  /**
   * Gets or sets the column span.
   */
  columnSpan?: number;
}
/**
 * Represents a string map of key value pairs.
 *
 */
export interface CIMStringMap {
  /**
   * Gets or sets the key.
   */
  key?: null | string;
  /**
   * Gets or sets the value.
   */
  value?: null | string;
}
/**
 * Represents a grid layout for pop-up media infos.
 *
 */
export interface CIMPopupLayout {
  /**
   * Gets or sets the array of column width values in percentage of the table width (0-100).
   */
  columnWidths?: number[] | null;
  /**
   * Gets or sets the border width in points.
   */
  borderWidth?: number;
  /**
   * Gets or sets the border color.
   */
  borderColor?: null | CIMColor;
}
/**
 * Represents a pop-up field description.
 *
 */
export interface CIMPopupFieldDescription {
  /**
   * Gets or sets the field alias.
   */
  alias?: null | string;
  /**
   * Gets or sets the field name.
   */
  fieldName?: null | string;
  /**
   * Gets or sets the number format.
   */
  numberFormat?: null | CIMNumberFormat;
}
/**
 * Provides access to members that control chart properties.
 */
export interface CIMChart {
  /**
   * Gets or sets the name of the chart.
   */
  name?: null | string;
  /**
   * Gets or sets the series properties of the chart.
   */
  series?: CIMChartSeries[] | null;
  /**
   * Gets or sets the general properties of the chart.
   */
  generalProperties?: null | CIMChartGeneralProperties;
  /**
   * Gets or sets the legend properties of the chart.
   */
  legend?: null | CIMChartLegend;
  /**
   * Gets or sets the properties of chart axis.
   */
  axes?: CIMChartAxis[] | null;
  /**
   * Gets or sets a setting which indicates whether chart handles selection in the input layer by creating series only from the selected data or
   * highlights selected values on the chart made from entire dataset.
   */
  mapSelectionHandling?: ChartMapSelectionHandling;
  /**
   * Gets or sets the client metadata about the chart.
   */
  metaData?: null | string;
  /**
   * Gets or sets the multi series chart properties for supported chart types.
   */
  multiSeriesChartProperties?: null | CIMMultiSeriesChartProperties;
}
/**
 * Provides access to members that control chart series properties.
 */
export interface CIMChartSeries {
  /**
   * Gets or sets the name of the series shown in the legend.
   */
  name?: null | string;
  /**
   * Gets or sets the default and unique name of the series.
   */
  uniqueName?: null | string;
  /**
   * Gets or sets the data field names in the series. Optional depending on series type.
   */
  fields?: string[] | null;
  /**
   * Gets or sets the sort field names in the series.
   */
  orderFields?: string[] | null;
  /**
   * Gets or sets the group field names in the series.
   */
  groupFields?: string[] | null;
  /**
   * Gets or sets the format string for series value labels.
   */
  whereClause?: null | string;
  /**
   * Gets or sets a value indicating whether the series shows data labels.
   */
  showLabels?: boolean;
  /**
   * Gets or sets the index of horizontal axis.
   */
  horizontalAxis?: number;
  /**
   * Gets or sets the index of vertical axis.
   */
  verticalAxis?: number;
  /**
   * Gets or sets the type of color for the series.
   */
  colorType?: ChartColorType;
  /**
   * Gets or sets the aggregate field values if series data has a group field.
   * Allowed values are count, sum, median, mean, and empty string.
   */
  fieldAggregation?: string[] | null;
  /**
   * Gets or sets the array of sort order types for fields in OrderFields property
   * Allowed values 0(Ascending), 1(Descending).
   */
  orderFieldsSortTypes?: number[] | null;
  /**
   * Gets or sets a value indicating whether the series is visible or not.
   */
  visible?: boolean;
  /**
   * Gets or sets the text style for the data label.
   */
  dataLabelText?: null | CIMChartTextProperties;
  /**
   * Gets or sets a value indicating whether this series is a multi series.
   */
  multiSeries?: boolean;
  /**
   * Gets or sets the locations for which data is to be plotted.
   */
  locations?: CIMChartLocationDefinition[] | null;
}
/**
 * Represents chart text properties.
 *
 */
export interface CIMChartTextProperties {
  /**
   * Gets or sets the fill color for the font.
   */
  fontFillColor?: null | CIMColor;
  /**
   * Gets or sets the outline color for the font.
   */
  fontOutlineColor?: null | CIMColor;
  /**
   * Gets or sets the font family name.
   */
  fontFamilyName?: null | string;
  /**
   * Gets or sets a value indicating whether the font style if it is italic or not.
   */
  fontItalic?: boolean;
  /**
   * Gets or sets the font size in points.
   */
  fontSize?: number;
  /**
   * Gets or sets the font weight.
   */
  fontWeight?: ChartFontWeight;
  /**
   * Gets or sets the text case.
   */
  textCase?: ChartTextCase;
  /**
   * Gets or sets a value indicating whether the text is drawn with an underline.
   */
  textUnderline?: boolean;
  /**
   * Gets or sets a value indicating whether the text is drawn with a strikethrough.
   */
  textStrikethrough?: boolean;
  /**
   * Gets or sets a value indicating whether the text is drawn with an overline.
   */
  textOverline?: boolean;
}
/**
 * Represents the definition of a location for which data is to be plotted.
 */
export interface CIMChartLocationDefinition {
  /**
   * Gets or sets the geometry.
   */
  geometry?: null | Geometry;
  /**
   * Gets or sets the symbol.
   */
  symbol?: null | CIMSymbolReference;
  /**
   * Gets or sets the label.
   */
  label?: null | string;
  /**
   * Gets or sets a value indicating whether this location is enabled or not.
   */
  enabled?: boolean;
}
/**
 * An abstract base class for objects that define geometric shapes. Geometry objects can be used
 * as geometry definitions for rendering data.
 */
export interface Geometry {
  /**
   * Gets a value indicating if the geometry has Z.
   */
  hasZ?: boolean;
  /**
   * Gets a value indicating if the geometry has M.
   */
  hasM?: boolean;
  /**
   * Gets a value indicating if the geometry has ID.
   */
  hasID?: boolean;
  /**
   * Gets the spatial reference of this instance.
   */
  spatialReference?: null | SpatialReference;
  /**
   * Gets the dimension of the geometry.
   */
  dimension?: number;
}
/**
 * Provides access to members that control general chart properties.
 */
export interface CIMChartGeneralProperties {
  /**
   * Gets or sets the title of the chart.
   */
  title?: null | string;
  /**
   * Gets or sets a value indicating whether the chart title is visible.
   */
  showTitle?: boolean;
  /**
   * Gets or sets a value indicating whether the chart title is auto generated.
   */
  useAutomaticTitle?: boolean;
  /**
   * Gets or sets the subtitle of the chart.
   */
  subTitle?: null | string;
  /**
   * Gets or sets a value indicating whether the chart subtitle is visible.
   */
  showSubTitle?: boolean;
  /**
   * Gets or sets the footer of the chart.
   */
  footer?: null | string;
  /**
   * Gets or sets a value indicating whether the chart footer is visible.
   */
  showFooter?: boolean;
  /**
   * Gets or sets the theme of the chart.
   */
  theme?: null | string;
  /**
   * Gets or sets the title symbol properties.
   */
  titleText?: null | CIMChartTextProperties;
  /**
   * Gets or sets the subtitle symbol properties.
   */
  subTitleText?: null | CIMChartTextProperties;
  /**
   * Gets or sets the footer symbol properties.
   */
  footerText?: null | CIMChartTextProperties;
  /**
   * Gets or sets the background fill symbol properties for the chart.
   */
  backgroundSymbolProperties?: null | CIMChartFillSymbolProperties;
  /**
   * Gets or sets the line symbol properties for grid lines.
   */
  gridLineSymbolProperties?: null | CIMChartLineSymbolProperties;
}
/**
 * Provides access to members that control properties of the fill
 * symbol.
 */
export interface CIMChartFillSymbolProperties {
  /**
   * Gets or sets the color of the fill.
   */
  color?: null | CIMColor;
  /**
   * Gets or sets the transparency level of histogram bars.
   */
  opacity?: number;
  /**
   * Gets or sets the properties of the fill symbol border.
   */
  lineSymbolProperties?: null | CIMChartLineSymbolProperties;
}
/**
 * Provides access to members that control properties of the line
 * symbol.
 */
export interface CIMChartLineSymbolProperties {
  /**
   * Gets or sets a value indicating whether the line is visible.
   */
  visible?: boolean;
  /**
   * Gets or sets the width of the line.
   */
  width?: number;
  /**
   * Gets or sets the style of the line.
   */
  style?: ChartLineDashStyle;
  /**
   * Gets or sets the color of the line.
   */
  color?: null | CIMColor;
}
/**
 * Provides access to members that control chart legend properties.
 */
export interface CIMChartLegend {
  /**
   * Gets or sets a value indicating whether the chart legend is visible.
   */
  visible?: boolean;
  /**
   * Gets or sets the title of the legend.
   */
  title?: null | string;
  /**
   * Gets or sets a value indicating whether the legend title is visible.
   */
  showTitle?: boolean;
  /**
   * Gets or sets the options in arranging the chart legend.
   */
  alignment?: ChartLegendAlignment;
  /**
   * Gets or sets the format string for series value labels.
   */
  valueFormat?: null | string;
  /**
   * Gets or sets the text symbol properties.
   */
  legendText?: null | CIMChartTextProperties;
  /**
   * Gets or sets the text symbol properties for legend title.
   */
  legendTitle?: null | CIMChartTextProperties;
}
/**
 * Provides access to members that control chart axis properties.
 */
export interface CIMChartAxis {
  /**
   * Gets or sets a value indicating whether the chart axis is visible.
   */
  visible?: boolean;
  /**
   * Gets or sets a value indicating whether the chart axis has logarithmic scale.
   */
  isLogarithmic?: boolean;
  /**
   * Gets or sets the title of an axis.
   */
  title?: null | string;
  /**
   * Gets or sets a value indicating whether the axis title is visible.
   */
  showTitle?: boolean;
  /**
   * Gets or sets a value indicating whether the axis title is auto generated.
   */
  useAutomaticTitle?: boolean;
  /**
   * Gets or sets the format string for axis value labels.
   */
  valueFormat?: null | string;
  /**
   * Gets or sets the number format of the axis labels. ValueNumberFormat takes precedence over ValueFormat when both are specified.
   */
  valueNumberFormat?: null | CIMNumberFormat;
  /**
   * Gets or sets the format string for axis date/time labels.
   */
  dateTimeFormat?: null | string;
  /**
   * Gets or sets a value indicating whether the chart axis calculates its minimum.
   */
  calculateAutomaticMinimum?: boolean;
  /**
   * Gets or sets a value indicating whether the chart axis calculates its maximum.
   */
  calculateAutomaticMaximum?: boolean;
  minimum?: unknown;
  maximum?: unknown;
  /**
   * Gets or sets the title symbol properties.
   */
  titleText?: null | CIMChartTextProperties;
  /**
   * Gets or sets the label symbol properties.
   */
  labelText?: null | CIMChartTextProperties;
  /**
   * Gets or sets the line symbol properties for axis.
   */
  axisLineSymbolProperties?: null | CIMChartLineSymbolProperties;
  /**
   * Gets or sets the array of guides.
   */
  guides?: CIMChartGuide[] | null;
  /**
   * Gets or sets the character limit for axis labels.
   */
  labelCharacterLimit?: number;
  /**
   * Gets or sets the relative start position for zoom/pan navigation. The value range is normalized between 0 and 1.
   */
  zoomStartPosition?: number;
  /**
   * Gets or sets the relative end position for zoom/pan navigation. The value range is normalized between 0 and 1.
   */
  zoomEndPosition?: number;
}
/**
 * Define the properties to define a chart guide.
 */
export interface CIMChartGuide {
  /**
   * Gets or sets the name / title for the guide.
   */
  name?: null | string;
  /**
   * Gets or sets the label for the guide.
   */
  label?: null | string;
  /**
   * Gets or sets the text format for the guide label.
   */
  labelText?: null | CIMChartTextProperties;
  /**
   * Gets or sets the relative position of the label to the guide.
   */
  labelPosition?: ChartPosition;
  /**
   * Gets or sets the numeric coordinate of the from value for the guide. This value will be used when guide value type is set to numeric.
   */
  valueFrom?: number;
  /**
   * Gets or sets the numeric coordinate of the to value for the guide. This value will be used when guide value type is set to numeric.
   */
  valueTo?: number;
  /**
   * Gets or sets the temporal coordinate of the from value for the guide. This value will be used when guide value type is set to temporal.
   */
  timeFrom?: null | TimeInstant;
  /**
   * Gets or sets the temporal coordinate of the to value for the guide. This value will be used when guide value type is set to temporal.
   */
  timeTo?: null | TimeInstant;
  /**
   * Gets or sets a value indicating whether the guide is visible.
   */
  visible?: boolean;
  /**
   * Gets or sets the type of the guide.
   */
  guideType?: ChartGuideType;
  /**
   * Gets or sets the type of the coordinate value used in the guide.
   */
  guideValueType?: ChartValueType;
  /**
   * Gets or sets the symbol properties for the guide.
   */
  fillSymbolProperties?: null | CIMChartFillSymbolProperties;
}
/**
 * Represents an instant in time. The time has no duration.
 */
export interface TimeInstant {
  /**
   * Gets or sets the time zone definition of the time.
   */
  timeReference?: null | TimeReference;
  /**
   * Gets or sets the time.
   */
  time?: string;
}
/**
 * Provides access to members that control multi series chart properties.
 */
export interface CIMMultiSeriesChartProperties {
  /**
   * Gets or sets a value indicating whether multi series chart properties are enabled.
   */
  enabled?: boolean;
}
