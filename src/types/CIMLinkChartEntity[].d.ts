/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Link chart node and entity symbolization source.
 */
export type LinkChartSymbolizationSource = 0 | 1;
/**
 * Visual variable info types.
 *
 */
export type ExpressionReturnType = 0 | 1 | 2;
/**
 * Font types.
 */
export type FontType = 0 | 1 | 2 | 3 | 4;
export type CIMLinkChartEntity = CIMLinkChartEntity1[];

/**
 * Represents a link chart entity.
 */
export interface CIMLinkChartEntity1 {
  /**
   * Gets or sets the Id of for the entity.
   */
  id?: null | string;
  /**
   * Gets or sets the name of the entity.
   */
  name?: null | string;
  /**
   * Gets or sets the CIMPath for the layer used to create the entity.
   */
  layerURI?: null | string;
  /**
   * Gets or sets the field used to label nodes.
   */
  labelFieldName?: null | string;
  /**
   * Gets or sets a value indicating whether the entity is non spatial. Where it has coordinates on the map. This is used to prevent drawing links on the map to the wrong nodes.
   */
  nonSpatial?: boolean;
  /**
   * Gets or sets the node drawing information.
   */
  drawingInfo?: null | CIMLinkChartNodeDrawingInfo;
  /**
   * Gets or sets the node labeling information.
   */
  labelingInfo?: null | CIMLinkChartNodeLabelingInfo;
  /**
   * Gets or sets a value indicating whether this entity is expanded in the contents pane.
   */
  expanded?: boolean;
  /**
   * Gets or sets the fields used to uniquely identify nodes. If duplicate values exist you can CollapseDuplicates.
   */
  keyFieldNames?: string[] | null;
}
/**
 * Represents the link chart node drawing information.
 */
export interface CIMLinkChartNodeDrawingInfo {
  /**
   * Gets or sets a value indicating whether the entity whether duplicate node values are consolidated. The result is one node for multiple values.
   */
  collapseDuplicates?: boolean;
  /**
   * Gets or sets the entity symbology preference.
   */
  nodeSymbology?: LinkChartSymbolizationSource;
  /**
   * Gets or sets the override symbol.
   */
  overrideSymbol?: null | CIMSymbolReference;
  /**
   * Gets or sets a value indicating whether the overview symbol color is calculated or specified.
   */
  overrideOverviewSymbolColor?: boolean;
  /**
   * Gets or sets the override overview symbol color.
   */
  overviewSymbolColor?: null | CIMColor;
  /**
   * Gets or sets a value indicating whether the node frames are shown.
   */
  showNodeFrames?: boolean;
}
/**
 * Represents a symbol reference.
 *
 */
export interface CIMSymbolReference {
  /**
   * Gets or sets the primitive overrides. Typically set by renderers at draw time.
   */
  primitiveOverrides?: CIMPrimitiveOverride[] | null;
  /**
   * Gets or sets the style path. Reserved for future use.
   */
  stylePath?: null | string;
  /**
   * Gets or sets the symbol.
   */
  symbol?: null | CIMSymbol;
  /**
   * Gets or sets the symbol name.
   */
  symbolName?: null | string;
  /**
   * Gets or sets the minimum scale range the symbol reference should be displayed at.
   */
  minScale?: number;
  /**
   * Gets or sets the maximum scale range the symbol reference should be displayed at.
   */
  maxScale?: number;
  /**
   * Gets or sets an array of scale dependent sizes.
   */
  scaleDependentSizeVariation?: CIMScaleDependentSizeVariation[] | null;
  /**
   * Gets or sets the minimum distance at which symbols are visible. Objects closer than this don't get rendered.
   */
  minDistance?: number;
  /**
   * Gets or sets the maximum distance at which symbols are visible. Objects beyond this point don't get rendered.
   */
  maxDistance?: number;
}
/**
 * Represents a primitive override.
 *
 */
export interface CIMPrimitiveOverride {
  /**
   * Gets or sets the primitive name this override applies to.
   */
  primitiveName?: null | string;
  /**
   * Gets or sets the property name in the primitive this override applies to.
   */
  propertyName?: null | string;
  /**
   * Gets or sets the expression.
   */
  expression?: null | string;
  /**
   * Gets or sets ExpressionInfo that contains the Arcade expression that returns value as a number or a string depending on the PropertyName.
   */
  valueExpressionInfo?: null | CIMExpressionInfo;
}
/**
 * Represents the properties required for authoring an Arcade expression.
 */
export interface CIMExpressionInfo {
  /**
   * Gets or sets the human readable text that describes the expression.
   */
  title?: null | string;
  /**
   * Gets or sets the Arcade expression used to evaluate and return the value that a property expects.
   */
  expression?: null | string;
  /**
   * Gets or sets the Name of the expression.
   */
  name?: null | string;
  /**
   * Gets or sets the ReturnType of the expression.
   */
  returnType?: ExpressionReturnType;
}
/**
 * Represents a symbol. A symbol is used to describe how a geometric shape, such as that from a graphic or feature, is displayed.
 *
 */
export interface CIMSymbol {}
/**
 * Represents the scale dependent size variations for a symbol reference.
 *
 */
export interface CIMScaleDependentSizeVariation {
  /**
   * Gets or sets the scale the size is associated with.
   */
  scale?: number;
  /**
   * Gets or sets the size for the associated scale.
   */
  size?: number;
}
/**
 * Supports colors in the CIM model by providing low level access to properties common amongst all color types.
 */
export interface CIMColor {
  /**
   * Gets and sets alpha.
   */
  alpha?: number;
  /**
   * Gets or sets the color spaced used defined by an ICC color profile.
   */
  colorSpace?: null | CIMColorSpace;
  /**
   * Gets or sets the values for the color and alpha channels as defined by the color model. Alpha is the last value in the array for all colors.
   */
  values?: number[] | null;
}
/**
 * Supports colors spaces by providing a common base type for all color spaces.
 */
export interface CIMColorSpace {}
/**
 * Represents the link chart node labeling information.
 */
export interface CIMLinkChartNodeLabelingInfo {
  /**
   * Gets or sets a value indicating whether the labels are shown.
   */
  showLabels?: boolean;
  /**
   * Gets or sets the link label font family name of the font. e.g. Comic Sans.
   */
  labelFontFamilyName?: null | string;
  /**
   * Gets or sets the style name for the link label font family. e.g. Regular, Bold, or Italic.
   */
  labelFontStyleName?: null | string;
  /**
   * Gets or sets Link label font type.
   */
  labelFontType?: FontType;
  /**
   * Gets or sets Link label font size.
   */
  labelFontSize?: number;
  /**
   * Gets or sets Link Label font color.
   */
  labelFontColor?: null | CIMColor;
  /**
   * Gets or sets Link label background color.
   */
  labelBackgroundColor?: null | CIMColor;
}
