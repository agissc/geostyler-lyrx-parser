/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type CIMFeatureTable = CIMDisplayTable & {
  /**
   * Gets or sets the data connection.
   */
  dataConnection?: null | CIMDataConnection;
  /**
   * Gets or sets an area that can be used to subset the rows in the virtual table.
   */
  studyArea?: null | Envelope;
  /**
   * Gets or sets the study area spatial relationship.
   */
  studyAreaSpatialRel?: EsriSpatialRelEnum;
  /**
   * Gets or sets the search order option.
   */
  searchOrder?: EsriSearchOrder;
  /**
   * Gets or sets a value indicating whether the data source is licensed.
   */
  isLicensedDataSource?: boolean;
  /**
   * Gets or sets the DefinitionSet for the table.
   */
  definitionSetURI?: null | string;
};
export type CIMDisplayTable = CIMObject & {
  /**
   * Gets or sets the definition expression that can subset the rows in the virtual table.
   */
  definitionExpression?: null | string;
  /**
   * Gets or sets the Name of definition expression.
   */
  definitionExpressionName?: null | string;
  /**
   * Gets or sets the definition filter choices.
   */
  definitionFilterChoices?: CIMDefinitionFilter[] | null;
  /**
   * Gets or sets the name of the attribute field that will be used as a label that represents each row in the table. The display field must be able to be represented as a string (string or numeric).
   */
  displayField?: null | string;
  /**
   * Gets or sets a value indicating whether or not the table can be edited.
   */
  editable?: boolean;
  /**
   * Gets or sets the relates.
   */
  relates?: CIMRelateInfoBase[] | null;
  /**
   * Gets or sets the field descriptions. Field descriptions for fields may only be written if values are overridden from defaults.
   */
  fieldDescriptions?: CIMFieldDescription[] | null;
  /**
   * Gets or sets the time fields.
   */
  timeFields?: null | CIMTimeTableDefinition;
  /**
   * Gets or sets the time definition.
   */
  timeDefinition?: null | CIMTimeDataDefinition;
  /**
   * Gets or sets the time display definition.
   */
  timeDisplayDefinition?: null | CIMTimeDisplayDefinition;
  /**
   * Gets or sets the time definition fields.
   */
  timeDimensionFields?: null | CIMTimeDimensionDefinition;
  /**
   * Gets or sets the range definitions.
   */
  rangeDefinitions?: CIMRangeDefinition[] | null;
  /**
   * Gets or sets the active range name.
   */
  activeRangeName?: null | string;
  /**
   * Gets or sets a value indicating whether related data should be selected when creating a new selection.
   */
  selectRelatedData?: boolean;
  /**
   * Gets or sets the bind variables.
   */
  bindVariables?: CIMBindVariable[] | null;
  /**
   * Gets or sets the subtype value that should be used in the feature layer definition. This property is honored only when feature layer is a member of SubtypeLayer.
   */
  subtypeValue?: number;
  /**
   * Gets or sets a value indicating whether or not the SubtypeValue should be used.
   */
  useSubtypeValue?: boolean;
  /**
   * Gets or sets the expression information used for coming up with a string that represents a row or a feature.
   */
  displayExpressionInfo?: null | CIMExpressionInfo;
  /**
   * Gets or sets the URI of the selection set for the table.
   */
  selectionSetURI?: null | string;
  /**
   * Gets or sets floor-aware properties for the layer/table used in floor filtering.
   */
  floorAwareTableProperties?: null | CIMFloorAwareTableProperties;
  /**
   * Gets or sets the route identifier field of a route feature class.
   *
   * This property will only be set for route feature classes, namely line and polyline feature classes that are m-aware.
   */
  routeIDFieldName?: null | string;
};
export type CIMDefinitionFilter = CIMObject & {
  /**
   * Gets or sets the name of the Definition Filter item.
   */
  name?: null | string;
  /**
   * Gets or sets the definition expression to filter features in the dataset.
   */
  definitionExpression?: null | string;
};
export type CIMRelateInfoBase = CIMObject & {
  /**
   * Gets or sets the relate data connection.
   */
  dataConnection?: null | CIMDataConnection;
  /**
   * Gets or sets the foreign key.
   */
  foreignKey?: null | string;
  /**
   * Gets or sets the primary key.
   */
  primaryKey?: null | string;
  /**
   * Gets or sets the relate cardinality.
   */
  cardinality?: EsriRelCardinality;
  /**
   * Gets or sets the name.
   */
  name?: null | string;
};
export type CIMDataConnection = CIMObject;
/**
 * Relationship Cardinality.
 */
export type EsriRelCardinality = 0 | 1 | 2;
export type CIMFieldDescription = CIMObject & {
  /**
   * Gets or sets the field alias.
   */
  alias?: null | string;
  /**
   * Gets or sets the field name.
   */
  fieldName?: null | string;
  /**
   * Gets or sets a value indicating whether the field is highlighted.
   */
  highlight?: boolean;
  /**
   * Gets or sets the number format.
   */
  numberFormat?: null | CIMNumberFormat;
  /**
   * Gets or sets a value indicating whether the field is read only.
   */
  readOnly?: boolean;
  /**
   * Gets or sets a value indicating whether the field is visible.
   */
  visible?: boolean;
  /**
   * Gets or sets a value indicating whether the field value is a ratio (used only by geoprocessing).
   */
  valueAsRatio?: boolean;
  /**
   * Gets or sets a value indicating whether the values from this field should be included in the search.
   */
  searchable?: boolean;
  /**
   * Gets or sets search mode to use when searching for values in this field.
   */
  searchMode?: DataSearchMode;
};
export type CIMNumberFormat = CIMObject;
/**
 * Field search modes.
 *
 */
export type DataSearchMode = 0 | 1;
export type CIMTimeTableDefinition = CIMObject & {
  /**
   * Gets or sets the start time field.
   */
  startTimeField?: null | string;
  /**
   * Gets or sets the end time field.
   */
  endTimeField?: null | string;
  /**
   * Gets or sets the time value format.
   */
  timeValueFormat?: null | string;
  /**
   * Gets or sets the track ID field.
   */
  trackIDField?: null | string;
};
export type CIMTimeDataDefinition = CIMObject & {
  /**
   * Gets or sets a value indicating whether or not to use time for animation purposes.
   */
  useTime?: boolean;
  /**
   * Gets or sets the time reference.
   */
  timeReference?: null | TimeReference;
  /**
   * Gets or sets the custom time extent.
   */
  customTimeExtent?: null | TimeExtent;
  /**
   * Gets or sets a value indicating whether or not this dataset has live data.
   */
  hasLiveData?: boolean;
  /**
   * Gets or sets a value indicating whether the data regularly changes, so the extent needs recalculated.
   *
   */
  timeExtentCanChange?: boolean;
};
export type TimeReference = CIMObject & {
  /**
   * Gets or sets the windows id for the time zone.
   */
  timeZoneNameID?: null | string;
  /**
   * Gets or sets a value indicating if the time reference should honor daylight savings time.
   */
  respectsDaylightSavingTime?: boolean;
  /**
   * Gets or sets a value indicating if the time reference should respect dynamic rules for adjusting with daylight savings time for specific years.
   */
  respectsDynamicAdjustmentRules?: boolean;
};
export type TimeExtent = TimeValue & {
  /**
   * Gets or sets the start time of the extent.
   */
  startTime?: string;
  /**
   * Gets or sets the end time of the extent.
   */
  endTime?: string;
  /**
   * Gets or sets a value indicating if the time extent is empty.
   */
  empty?: boolean;
  /**
   * Gets or sets a value indicating if the extent contains a start time. If false the time extent has no lower bound.
   */
  startTimeSpecified?: boolean;
  /**
   * Gets or sets a value indicating if the extent contains an end time. If false the time extent has no upper bound.
   */
  endTimeSpecified?: boolean;
};
export type TimeValue = CIMObject & {
  /**
   * Gets or sets the time zone definition of the time.
   */
  timeReference?: null | TimeReference;
};
export type CIMTimeDisplayDefinition = CIMObject & {
  /**
   * Gets or sets a value indicating whether time is cumulative.
   */
  cumulative?: boolean;
  /**
   * Gets or sets the time interval.
   */
  timeInterval?: number;
  /**
   * Gets or sets the time interval units.
   */
  timeIntervalUnits?: EsriTimeUnits;
  /**
   * Gets or sets the time offset.
   */
  timeOffset?: number;
  /**
   * Gets or sets the time offset units.
   */
  timeOffsetUnits?: EsriTimeUnits;
  /**
   * Gets or sets a cached set of unique OLE date values.
   */
  uniqueTimes?: number[] | null;
};
/**
 * Time units.
 */
export type EsriTimeUnits = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10;
export type CIMTimeDimensionDefinition = CIMObject & {
  /**
   * Gets or sets the time dimension name.
   */
  timeDimensionName?: null | string;
  /**
   * Gets or sets the time dimension format.
   */
  timeDimensionFormat?: null | string;
};
export type CIMRangeDefinition = CIMObject & {
  /**
   * Gets or sets the name.
   */
  name?: null | string;
  /**
   * Gets or sets the field name.
   */
  fieldName?: null | string;
  /**
   * Gets or sets the current range.
   */
  currentRange?: null | CIMRange;
  /**
   * Gets or sets the custom full extent.
   */
  customFullExtent?: null | CIMRange;
  /**
   * Gets or sets a value indicating whether or not range is exclusion.
   */
  isExclusion?: boolean;
  /**
   * Gets or sets ExpressionInfo that contains the Arcade expression that returns a string representing range alias value.
   */
  aliasExpressionInfo?: null | CIMExpressionInfo;
};
export type CIMRange = CIMObject & {
  /**
   * Gets or sets the minimum.
   */
  min?: number;
  /**
   * Gets or sets the maximum.
   */
  max?: number;
};
export type CIMExpressionInfo = CIMObject & {
  /**
   * Gets or sets the human readable text that describes the expression.
   */
  title?: null | string;
  /**
   * Gets or sets the Arcade expression used to evaluate and return the value that a property expects.
   */
  expression?: null | string;
  /**
   * Gets or sets the Name of the expression.
   */
  name?: null | string;
  /**
   * Gets or sets the ReturnType of the expression.
   */
  returnType?: ExpressionReturnType;
};
/**
 * Visual variable info types.
 *
 */
export type ExpressionReturnType = 0 | 1 | 2;
export type CIMBindVariable = CIMObject & {
  /**
   * Gets or sets the name of the variable. The name must be unique among all variables.
   */
  variableName?: null | string;
  /**
   * Gets or sets the alias of the variable.
   */
  alias?: null | string;
  /**
   * Gets or sets the type of the variable.
   */
  dataType?: BindVariableType;
};
/**
 * Bind variable types.
 */
export type BindVariableType = 0 | 1 | 2 | 3 | 4;
export type CIMFloorAwareTableProperties = CIMObject & {
  /**
   * Gets or sets rank or "level" at which the layer/table participates in filtering for Indoors or floor-aware layers/tables.
   */
  floorFilterRank?: FloorFilterRank;
  /**
   * Gets or sets the name of the field that carries the floor value used for floor filtering.
   */
  floorField?: null | string;
};
/**
 * Represents the rank or "level" at which the layer participates in filtering for Indoors or floor-aware layers.
 */
export type FloorFilterRank = 0 | 1 | 2 | 3;
export type Envelope = Geometry & {
  /**
   * Gets the GeometryType of this instance.  Always returns Envelope.
   */
  geometryType?: GeometryType;
  /**
   * Gets the point count of this instance. Always returns 5.
   */
  pointCount?: number;
  /**
   * Gets the X minimum of this instance.
   */
  xMin?: number;
  /**
   * Gets the Y minimum of this instance.
   */
  yMin?: number;
  /**
   * Gets the X maximum of this instance.
   */
  xMax?: number;
  /**
   * Gets the Y maximum of this instance.
   */
  yMax?: number;
  /**
   * Gets the Z minimum of this instance.
   */
  zMin?: number;
  /**
   * Gets the Z maximum of this instance.
   */
  zMax?: number;
  /**
   * Gets the M minimum of this instance.
   */
  mMin?: number;
  /**
   * Gets the M maximum of this instance.
   */
  mMax?: number;
  /**
   * Gets the ID minimum of this instance.
   */
  idMin?: number;
  /**
   * Gets the ID maximum of this instance.
   */
  idMax?: number;
  /**
   * Gets the center of this instance as a Coordinate2D.
   */
  centerCoordinate?: Coordinate2D;
  /**
   * Gets the center of this instance as a MapPoint.
   */
  center?: null | MapPoint;
  /**
   * Gets the height of this instance.
   */
  height?: number;
  /**
   * Gets the width of this instance.
   */
  width?: number;
  /**
   * Gets the depth of this instance.
   */
  depth?: number;
  /**
   * Gets the perimeter length of this instance.
   */
  length?: number;
  /**
   * Gets the 3D length of the perimeter of this instance.
   */
  length3D?: number;
  /**
   * Gets the area of this instance.
   */
  area?: number;
  /**
   * Gets the minimum enclosing envelope of this instance. Returns null if this geometry has IsEmpty = true.
   */
  extent?: null | Envelope;
  /**
   * Gets a value indicating whether or not the geometry is empty.
   */
  isEmpty?: boolean;
};
/**
 * Describes the different types of units.
 */
export type UnitType = 0 | 1 | 2 | 3;
/**
 * Describes the different types of geometry.
 */
export type GeometryType = 0 | 513 | 3077 | 3594 | 8710 | 25607 | 27656 | 32777;
export type MapPoint = Geometry & {
  /**
   * Gets the GeometryType of this instance.  Always returns Point.
   */
  geometryType?: GeometryType;
  /**
   * Gets the point count of the geometry. This is always 1.
   */
  pointCount?: number;
  /**
   * Gets the X-coordinate.
   */
  x?: number;
  /**
   * Gets the Y-coordinate.
   */
  y?: number;
  /**
   * Gets the Z-coordinate.
   */
  z?: number;
  /**
   * Gets the measure value.
   */
  m?: number;
  /**
   * Gets the ID value.
   */
  id?: number;
  /**
   * Gets a Coordinate2D structure with the X and Y values.
   */
  coordinate2D?: Coordinate2D;
  /**
   * Gets a Coordinate3D structure with the X, Y, and Z values.
   */
  coordinate3D?: Coordinate3D;
  /**
   * Gets the minimum enclosing envelope of the geometry.
   */
  extent?: null | Envelope;
  /**
   * Gets a value indicating whether or not the geometry is empty.
   */
  isEmpty?: boolean;
};
/**
 * Queryable spatial relationships.
 */
export type EsriSpatialRelEnum = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
/**
 * Spatial Filter Search Order.
 */
export type EsriSearchOrder = 0 | 1;

/**
 * Represents the base CIM object class.
 *
 */
export interface CIMObject {}
/**
 * An abstract base class for objects that define geometric shapes. Geometry objects can be used
 * as geometry definitions for rendering data.
 */
export interface Geometry {
  /**
   * Gets a value indicating if the geometry has Z.
   */
  hasZ?: boolean;
  /**
   * Gets a value indicating if the geometry has M.
   */
  hasM?: boolean;
  /**
   * Gets a value indicating if the geometry has ID.
   */
  hasID?: boolean;
  /**
   * Gets the spatial reference of this instance.
   */
  spatialReference?: null | SpatialReference;
  /**
   * Gets the dimension of the geometry.
   */
  dimension?: number;
}
/**
 * Class representing a spatial reference.
 */
export interface SpatialReference {
  /**
   * Gets the well-known ID for this instance.
   */
  wkid?: number;
  /**
   * Gets the latest well-known ID for this instance.
   */
  latestWkid?: number;
  /**
   * Gets the underlying geographic coordinate system for this instance.
   * If this instance is a geographic coordinate system,
   * a pointer to this instance is returned.
   */
  gcs?: null | SpatialReference;
  /**
   * Gets the well-known text for this instance.
   */
  wkt?: null | string;
  /**
   * Gets the name of the spatial reference.
   */
  name?: null | string;
  /**
   * Gets the geographic coordinate system well-known ID.
   */
  gcsWkid?: number;
  /**
   * Gets the geographic coordinate system well-known text.
   */
  gcsWkt?: null | string;
  /**
   * Gets the vertical coordinate system well-known ID.
   */
  vcsWkid?: number;
  /**
   * Gets the vertical coordinate system well-known text.
   */
  vcsWkt?: null | string;
  /**
   * Determines if a vertical coordinate system has been defined.
   */
  hasVcs?: boolean;
  /**
   * Gets the XY Tolerance.
   */
  xyTolerance?: number;
  /**
   * Gets the XY Resolution.
   */
  xyResolution?: number;
  /**
   * Gets the Z Tolerance.
   */
  zTolerance?: number;
  /**
   * Gets the M Tolerance.
   */
  mTolerance?: number;
  /**
   * Gets the XY Scale.
   */
  xyScale?: number;
  /**
   * Gets the Z Scale.
   */
  zScale?: number;
  /**
   * Gets the M Scale.
   */
  mScale?: number;
  /**
   * Gets the false X.
   */
  falseX?: number;
  /**
   * Gets the false Y.
   */
  falseY?: number;
  /**
   * Gets the false Z.
   */
  falseZ?: number;
  /**
   * Gets the false M.
   */
  falseM?: number;
  /**
   * Gets the left longitude value of the geographic coordinate system.
   */
  leftLongitude?: number;
  /**
   * Gets the right longitude value of the geographic coordinate system.
   */
  rightLongitude?: number;
  /**
   * Gets the HighPrecision flag of this instance.
   */
  isHighPrecision?: boolean;
  /**
   * Gets the units that the spatial reference coordinates are in.
   */
  unit?: null | Unit;
  /**
   * Gets the units that the spatial reference z-coordinates are in.
   */
  zUnit?: null | Unit;
  /**
   * Gets the central meridian of the projected coordinate system.
   */
  centralMeridian?: number;
  /**
   * Gets if this is a geographic coordinate system.
   */
  isGeographic?: boolean;
  /**
   * Gets if this is a projected coordinate system.
   */
  isProjected?: boolean;
  /**
   * Gets if this is an image coordinate system.
   */
  isImage?: boolean;
  /**
   * Gets if this is the unknown coordinate system.
   */
  isUnknown?: boolean;
  /**
   * Gets if this is instance is pannable.
   */
  isPannable?: boolean;
  /**
   * Gets the square domain extent of the spatial reference.
   */
  domain?: null | Envelope;
  /**
   * Gets the horizontal datum of this spatial reference.
   */
  datum?: null | Datum;
}
/**
 * A common base class between all units, linear, area and angular units.
 */
export interface Unit {
  /**
   * Gets the well-known ID of the unit. If the unit is a custom unit, then the factory code will be 0.
   */
  factoryCode?: number;
  /**
   * Gets the well-known text of the unit.
   */
  wkt?: null | string;
  /**
   * Gets the name of the unit.
   */
  name?: null | string;
  /**
   * Gets the conversion factor of the unit.
   */
  conversionFactor?: number;
  /**
   * Gets the type of unit.
   */
  unitType?: UnitType;
}
/**
 * Describes the horizontal datum of a geographic coordinate system. It is returned from Datum.
 */
export interface Datum {
  /**
   * Gets the well-known ID of this horizontal datum.
   */
  wkid?: number;
  /**
   * Gets the well-known ID of the spheroid of this horizontal datum.
   */
  spheroidWkid?: number;
  /**
   * Gets the length of the semi-major axis of the spheroid of this horizontal datum.
   */
  spheroidSemiMajorAxis?: number;
  /**
   * Gets the length of the semi-minor axis of the spheroid of this horizontal datum.
   */
  spheroidSemiMinorAxis?: number;
  /**
   * Gets the flattening ratio of the spheroid of this horizontal datum.
   */
  spheroidFlattening?: number;
  /**
   * Gets the name of this horizontal datum.
   */
  name?: null | string;
  /**
   * Gets the name of the spheroid of this horizontal datum.
   */
  spheroidName?: null | string;
}
/**
 * A lightweight structure that holds X and Y values.
 */
export interface Coordinate2D {
  /**
   * Gets or sets the X-component.
   */
  x?: number;
  /**
   * Gets or sets the Y-component.
   */
  y?: number;
  /**
   * Gets or sets the length of the Coordinate2D as a vector.
   */
  magnitude?: number;
  /**
   * Indicates if the Coordinate2D is empty.
   */
  isEmpty?: boolean;
}
/**
 * A structure containing methods to manipulate 3D vertices and 3D vectors.
 */
export interface Coordinate3D {
  /**
   * Gets or sets the X-component.
   */
  x?: number;
  /**
   * Gets or sets the Y-component.
   */
  y?: number;
  /**
   * Gets or sets the Z-component.
   */
  z?: number;
  /**
   * Gets or sets the length of the Coordinate3D as a vector.
   */
  magnitude?: number;
  /**
   * Gets the inclination of the Coordinate3D. The inclination is measured in radians.
   */
  inclination?: number;
  /**
   * Gets the azimuth of the Coordinate3D. The azimuth is measured in radians.
   */
  azimuth?: number;
  /**
   * Indicates if the Coordinate3D is empty.
   */
  isEmpty?: boolean;
}
