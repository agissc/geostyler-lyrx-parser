/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Specifies the method of transition for a value in a keyframe.
 */
export type AnimationTransition = 0 | 1 | 2 | 3 | 4 | 5 | 6;
/**
 * Define the type of algorithm used to calculate transitions between animation camera keyframes.
 */
export type EsriAnimationTransitionMode = 0 | 1 | 2;
/**
 * Describes the different types of units.
 */
export type UnitType = 0 | 1 | 2 | 3;
/**
 * Describes the different types of geometry.
 */
export type GeometryType = 0 | 513 | 3077 | 3594 | 8710 | 25607 | 27656 | 32777;
/**
 * Represents the direction from an edge of the view used to clip a layer.
 */
export type SwipeDirection = 0 | 1 | 2 | 3 | 4;
/**
 * Time relation types.
 */
export type EsriTimeRelation = 0 | 1 | 2 | 3;
/**
 * Visual variable info types.
 *
 */
export type ExpressionReturnType = 0 | 1 | 2;
/**
 * Blending modes.
 */
export type BlendingMode =
  | 0
  | 1
  | 2
  | 3
  | 4
  | 5
  | 6
  | 7
  | 8
  | 9
  | 10
  | 11
  | 12
  | 13
  | 14
  | 15
  | 16
  | 17
  | 18
  | 19
  | 20
  | 21
  | 22
  | 23;
/**
 * A list of anchor positions for an element on a page layout.
 */
export type Anchor = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
export type CIMViewTrack = CIMViewTrack1[];

/**
 * Represents a animation view track.
 */
export interface CIMViewTrack1 {
  /**
   * Gets or sets the name of the track.
   */
  name?: null | string;
  /**
   * Gets or sets the collection of view keyframes.
   */
  keyframes?: CIMViewKeyframe[] | null;
  /**
   * Gets or sets the list of graphic overlays used in the animation.
   */
  screenGraphics?: CIMAnimationScreenGraphic[] | null;
  /**
   * Gets or sets the desired pixel width the animation was made to export at.
   */
  referenceResolutionWidth?: number;
  /**
   * Gets or sets the desired pixel height the animation was made to export at.
   */
  referenceResolutionHeight?: number;
  /**
   * Gets or sets the export MIME type. Supported formats: video/mp4, video/avi, image/gif, image/jpeg, or image/png.
   */
  exportType?: null | string;
  /**
   * Gets or sets the number of frames per second.
   */
  frameRate?: number;
  /**
   * Gets or sets the data rate factor. A higher data rate can give better quality, but produces a larger file.
   */
  dataRateFactor?: number;
  /**
   * Gets or sets what time in the animation to start at for exporting.
   */
  startFrameTime?: number;
  /**
   * Gets or sets what time in the animation to end at for exporting.
   */
  endFrameTime?: number;
}
/**
 * Represents a view keyframe.
 */
export interface CIMViewKeyframe {
  /**
   * Gets or sets the value of time in seconds that the keyframe exists in the track.
   */
  trackTime?: number;
  /**
   * Gets or sets the camera keyframe.
   */
  camera?: null | CIMKeyframeCamera;
  /**
   * Gets or sets the collection of layer keyframes.
   */
  layers?: CIMKeyframeLayer[] | null;
  /**
   * Gets or sets the range keyframe.
   */
  range?: null | CIMKeyframeRange;
  /**
   * Gets or sets the time keyframe.
   */
  time?: null | CIMKeyframeTime;
  /**
   * Gets or sets the collection of surface keyframes.
   */
  surfaces?: CIMKeyframeSurface[] | null;
  /**
   * Gets or sets the collection of exploratory analysis.
   */
  exploratoryAnalysis?: CIMKeyframeAnalysis[] | null;
}
/**
 * Represents a camera keyframe.
 */
export interface CIMKeyframeCamera {
  /**
   * Gets or sets the camera for the keyframe.
   */
  camera?: null | CIMViewCamera;
  /**
   * Gets or sets the method of transition for the heading of the camera.
   */
  headingTransition?: AnimationTransition;
  /**
   * Gets or sets the method of transition for the pitch of the camera.
   */
  pitchTransition?: AnimationTransition;
  /**
   * Gets or sets the method of transition for the roll of the camera.
   */
  rollTransition?: AnimationTransition;
  /**
   * Gets or sets the method of transition for the scale of the camera.
   */
  scaleTransition?: AnimationTransition;
  /**
   * Gets or sets the method of transition for the x of the camera.
   */
  xTransition?: AnimationTransition;
  /**
   * Gets or sets the method of transition for the y of the camera.
   */
  yTransition?: AnimationTransition;
  /**
   * Gets or sets the method of transition for the z of the camera.
   */
  zTransition?: AnimationTransition;
  /**
   * Gets or sets the value of adjustable transitions. The value must be between 0.0 and 1.0. Smaller values will result in a tighter / smaller curve than larger values.
   */
  transitionScale?: number;
  /**
   * Gets or sets the transition mode determines whether the camera path follows a Geodesic or Cartesian interpolation.
   */
  cameraTransitionMode?: EsriAnimationTransitionMode;
  /**
   * Gets or sets a geometry for the camera to look at. When a geometry is set it overrides the camera's heading and pitch. Must be in the map's spatial reference.
   */
  lookAt?: null | Geometry;
  /**
   * Gets or sets the bezier control points between the previous camera position and the current camera position. Used to define the camera path for the AdjustableArc transition. When the value is null or empty, a default path is used. Must be in the map's spatial reference.
   */
  adjustedCameraPath?: null | Multipoint;
  /**
   * Gets or sets the field of view angle. Only applies to scene views.
   */
  fieldOfView?: number;
  /**
   * Gets or sets the method of transition for the field of view of the camera.
   */
  fieldOfViewTransition?: AnimationTransition;
}
/**
 * Represents a view camera.
 *
 */
export interface CIMViewCamera {
  /**
   * Gets or sets the heading.
   */
  heading?: number;
  /**
   * Gets or sets the pitch.
   */
  pitch?: number;
  /**
   * Gets or sets the roll.
   */
  roll?: number;
  /**
   * Gets or sets the scale.
   */
  scale?: number;
  /**
   * Gets or sets X.
   */
  x?: number;
  /**
   * Gets or sets Y.
   */
  y?: number;
  /**
   * Gets or sets Z.
   */
  z?: number;
  /**
   * Gets or sets the height of the viewport in meters. Viewport height and width are used for consistent camera positioning in isometric 3D views, eye separation in 3D stereo views and defines the focal distance in perspective views.
   */
  viewportHeight?: number;
  /**
   * Gets or sets the width of the viewport in meters. Viewport height and width are used for consistent camera positioning in isometric 3D views, eye separation in 3D stereo views and defines the focal distance in perspective views.
   */
  viewportWidth?: number;
}
/**
 * An abstract base class for objects that define geometric shapes. Geometry objects can be used
 * as geometry definitions for rendering data.
 */
export interface Geometry {
  /**
   * Gets a value indicating if the geometry has Z.
   */
  hasZ?: boolean;
  /**
   * Gets a value indicating if the geometry has M.
   */
  hasM?: boolean;
  /**
   * Gets a value indicating if the geometry has ID.
   */
  hasID?: boolean;
  /**
   * Gets the spatial reference of this instance.
   */
  spatialReference?: null | SpatialReference;
  /**
   * Gets the dimension of the geometry.
   */
  dimension?: number;
}
/**
 * Class representing a spatial reference.
 */
export interface SpatialReference {
  /**
   * Gets the well-known ID for this instance.
   */
  wkid?: number;
  /**
   * Gets the latest well-known ID for this instance.
   */
  latestWkid?: number;
  /**
   * Gets the underlying geographic coordinate system for this instance.
   * If this instance is a geographic coordinate system,
   * a pointer to this instance is returned.
   */
  gcs?: null | SpatialReference;
  /**
   * Gets the well-known text for this instance.
   */
  wkt?: null | string;
  /**
   * Gets the name of the spatial reference.
   */
  name?: null | string;
  /**
   * Gets the geographic coordinate system well-known ID.
   */
  gcsWkid?: number;
  /**
   * Gets the geographic coordinate system well-known text.
   */
  gcsWkt?: null | string;
  /**
   * Gets the vertical coordinate system well-known ID.
   */
  vcsWkid?: number;
  /**
   * Gets the vertical coordinate system well-known text.
   */
  vcsWkt?: null | string;
  /**
   * Determines if a vertical coordinate system has been defined.
   */
  hasVcs?: boolean;
  /**
   * Gets the XY Tolerance.
   */
  xyTolerance?: number;
  /**
   * Gets the XY Resolution.
   */
  xyResolution?: number;
  /**
   * Gets the Z Tolerance.
   */
  zTolerance?: number;
  /**
   * Gets the M Tolerance.
   */
  mTolerance?: number;
  /**
   * Gets the XY Scale.
   */
  xyScale?: number;
  /**
   * Gets the Z Scale.
   */
  zScale?: number;
  /**
   * Gets the M Scale.
   */
  mScale?: number;
  /**
   * Gets the false X.
   */
  falseX?: number;
  /**
   * Gets the false Y.
   */
  falseY?: number;
  /**
   * Gets the false Z.
   */
  falseZ?: number;
  /**
   * Gets the false M.
   */
  falseM?: number;
  /**
   * Gets the left longitude value of the geographic coordinate system.
   */
  leftLongitude?: number;
  /**
   * Gets the right longitude value of the geographic coordinate system.
   */
  rightLongitude?: number;
  /**
   * Gets the HighPrecision flag of this instance.
   */
  isHighPrecision?: boolean;
  /**
   * Gets the units that the spatial reference coordinates are in.
   */
  unit?: null | Unit;
  /**
   * Gets the units that the spatial reference z-coordinates are in.
   */
  zUnit?: null | Unit;
  /**
   * Gets the central meridian of the projected coordinate system.
   */
  centralMeridian?: number;
  /**
   * Gets if this is a geographic coordinate system.
   */
  isGeographic?: boolean;
  /**
   * Gets if this is a projected coordinate system.
   */
  isProjected?: boolean;
  /**
   * Gets if this is an image coordinate system.
   */
  isImage?: boolean;
  /**
   * Gets if this is the unknown coordinate system.
   */
  isUnknown?: boolean;
  /**
   * Gets if this is instance is pannable.
   */
  isPannable?: boolean;
  /**
   * Gets the square domain extent of the spatial reference.
   */
  domain?: null | Envelope;
  /**
   * Gets the horizontal datum of this spatial reference.
   */
  datum?: null | Datum;
}
/**
 * A common base class between all units, linear, area and angular units.
 */
export interface Unit {
  /**
   * Gets the well-known ID of the unit. If the unit is a custom unit, then the factory code will be 0.
   */
  factoryCode?: number;
  /**
   * Gets the well-known text of the unit.
   */
  wkt?: null | string;
  /**
   * Gets the name of the unit.
   */
  name?: null | string;
  /**
   * Gets the conversion factor of the unit.
   */
  conversionFactor?: number;
  /**
   * Gets the type of unit.
   */
  unitType?: UnitType;
}
/**
 * An envelope is an axis-aligned box described by the coordinates
 * of the lower left corner and the coordinates of the upper right corner.   To create an envelope use the
 * EnvelopeBuilderEx object.
 */
export interface Envelope {
  /**
   * Gets a value indicating if the geometry has Z.
   */
  hasZ?: boolean;
  /**
   * Gets a value indicating if the geometry has M.
   */
  hasM?: boolean;
  /**
   * Gets a value indicating if the geometry has ID.
   */
  hasID?: boolean;
  /**
   * Gets the spatial reference of this instance.
   */
  spatialReference?: null | SpatialReference;
  /**
   * Gets the dimension of the geometry.
   */
  dimension?: number;
  /**
   * Gets the GeometryType of this instance.  Always returns Envelope.
   */
  geometryType?: GeometryType;
  /**
   * Gets the point count of this instance. Always returns 5.
   */
  pointCount?: number;
  /**
   * Gets the X minimum of this instance.
   */
  xMin?: number;
  /**
   * Gets the Y minimum of this instance.
   */
  yMin?: number;
  /**
   * Gets the X maximum of this instance.
   */
  xMax?: number;
  /**
   * Gets the Y maximum of this instance.
   */
  yMax?: number;
  /**
   * Gets the Z minimum of this instance.
   */
  zMin?: number;
  /**
   * Gets the Z maximum of this instance.
   */
  zMax?: number;
  /**
   * Gets the M minimum of this instance.
   */
  mMin?: number;
  /**
   * Gets the M maximum of this instance.
   */
  mMax?: number;
  /**
   * Gets the ID minimum of this instance.
   */
  idMin?: number;
  /**
   * Gets the ID maximum of this instance.
   */
  idMax?: number;
  /**
   * Gets the center of this instance as a Coordinate2D.
   */
  centerCoordinate?: Coordinate2D;
  /**
   * Gets the center of this instance as a MapPoint.
   */
  center?: null | MapPoint;
  /**
   * Gets the height of this instance.
   */
  height?: number;
  /**
   * Gets the width of this instance.
   */
  width?: number;
  /**
   * Gets the depth of this instance.
   */
  depth?: number;
  /**
   * Gets the perimeter length of this instance.
   */
  length?: number;
  /**
   * Gets the 3D length of the perimeter of this instance.
   */
  length3D?: number;
  /**
   * Gets the area of this instance.
   */
  area?: number;
  /**
   * Gets the minimum enclosing envelope of this instance. Returns null if this geometry has IsEmpty = true.
   */
  extent?: null | Envelope;
  /**
   * Gets a value indicating whether or not the geometry is empty.
   */
  isEmpty?: boolean;
}
/**
 * A lightweight structure that holds X and Y values.
 */
export interface Coordinate2D {
  /**
   * Gets or sets the X-component.
   */
  x?: number;
  /**
   * Gets or sets the Y-component.
   */
  y?: number;
  /**
   * Gets or sets the length of the Coordinate2D as a vector.
   */
  magnitude?: number;
  /**
   * Indicates if the Coordinate2D is empty.
   */
  isEmpty?: boolean;
}
/**
 * A MapPoint represents a single location in space. The location consists of X and Y values and optionally a Z and/or M value.
 * To create a MapPoint use the MapPointBuilderEx object.
 */
export interface MapPoint {
  /**
   * Gets a value indicating if the geometry has Z.
   */
  hasZ?: boolean;
  /**
   * Gets a value indicating if the geometry has M.
   */
  hasM?: boolean;
  /**
   * Gets a value indicating if the geometry has ID.
   */
  hasID?: boolean;
  /**
   * Gets the spatial reference of this instance.
   */
  spatialReference?: null | SpatialReference;
  /**
   * Gets the dimension of the geometry.
   */
  dimension?: number;
  /**
   * Gets the GeometryType of this instance.  Always returns Point.
   */
  geometryType?: GeometryType;
  /**
   * Gets the point count of the geometry. This is always 1.
   */
  pointCount?: number;
  /**
   * Gets the X-coordinate.
   */
  x?: number;
  /**
   * Gets the Y-coordinate.
   */
  y?: number;
  /**
   * Gets the Z-coordinate.
   */
  z?: number;
  /**
   * Gets the measure value.
   */
  m?: number;
  /**
   * Gets the ID value.
   */
  id?: number;
  /**
   * Gets a Coordinate2D structure with the X and Y values.
   */
  coordinate2D?: Coordinate2D;
  /**
   * Gets a Coordinate3D structure with the X, Y, and Z values.
   */
  coordinate3D?: Coordinate3D;
  /**
   * Gets the minimum enclosing envelope of the geometry.
   */
  extent?: null | Envelope;
  /**
   * Gets a value indicating whether or not the geometry is empty.
   */
  isEmpty?: boolean;
}
/**
 * A structure containing methods to manipulate 3D vertices and 3D vectors.
 */
export interface Coordinate3D {
  /**
   * Gets or sets the X-component.
   */
  x?: number;
  /**
   * Gets or sets the Y-component.
   */
  y?: number;
  /**
   * Gets or sets the Z-component.
   */
  z?: number;
  /**
   * Gets or sets the length of the Coordinate3D as a vector.
   */
  magnitude?: number;
  /**
   * Gets the inclination of the Coordinate3D. The inclination is measured in radians.
   */
  inclination?: number;
  /**
   * Gets the azimuth of the Coordinate3D. The azimuth is measured in radians.
   */
  azimuth?: number;
  /**
   * Indicates if the Coordinate3D is empty.
   */
  isEmpty?: boolean;
}
/**
 * Describes the horizontal datum of a geographic coordinate system. It is returned from Datum.
 */
export interface Datum {
  /**
   * Gets the well-known ID of this horizontal datum.
   */
  wkid?: number;
  /**
   * Gets the well-known ID of the spheroid of this horizontal datum.
   */
  spheroidWkid?: number;
  /**
   * Gets the length of the semi-major axis of the spheroid of this horizontal datum.
   */
  spheroidSemiMajorAxis?: number;
  /**
   * Gets the length of the semi-minor axis of the spheroid of this horizontal datum.
   */
  spheroidSemiMinorAxis?: number;
  /**
   * Gets the flattening ratio of the spheroid of this horizontal datum.
   */
  spheroidFlattening?: number;
  /**
   * Gets the name of this horizontal datum.
   */
  name?: null | string;
  /**
   * Gets the name of the spheroid of this horizontal datum.
   */
  spheroidName?: null | string;
}
/**
 * A Multipoint is a ordered collection of map points. To create a multipoint use the
 * MultipointBuilderEx object.
 */
export interface Multipoint {
  /**
   * Gets a value indicating if the geometry has Z.
   */
  hasZ?: boolean;
  /**
   * Gets a value indicating if the geometry has M.
   */
  hasM?: boolean;
  /**
   * Gets a value indicating if the geometry has ID.
   */
  hasID?: boolean;
  /**
   * Gets the spatial reference of this instance.
   */
  spatialReference?: null | SpatialReference;
  /**
   * Gets the dimension of the geometry.
   */
  dimension?: number;
  /**
   * Gets the geometry type. Always returns Multipoint.
   */
  geometryType?: GeometryType;
  /**
   * Gets the collection of points.
   */
  points?: MapPoint[] | null;
  /**
   * Gets the count of points in this instance.
   */
  pointCount?: number;
  /**
   * Gets the minimum enclosing envelope of this instance.
   */
  extent?: null | Envelope;
  /**
   * Gets a value indicating whether or not this instance is empty.
   */
  isEmpty?: boolean;
}
/**
 * Represents a layer keyframe.
 */
export interface CIMKeyframeLayer {
  /**
   * Gets or sets the path to the layer.
   */
  layerURI?: null | string;
  /**
   * Gets or sets the method of transition for the visibility of the layer.
   */
  transparency?: number;
  /**
   * Gets or sets the method of transition for the transparency of the layer.
   */
  transparencyTransition?: AnimationTransition;
  /**
   * Gets or sets a value indicating whether the layer is visible.
   */
  visible?: boolean;
  /**
   * Gets or sets the direction to clip from an edge.
   */
  swipeDirection?: SwipeDirection;
  /**
   * Gets or sets the amount of the visible area to clip.
   */
  swipePercent?: number;
  /**
   * Gets or sets the vertical exaggeration.
   */
  verticalExaggeration?: number;
  /**
   * Gets or sets the vertical exaggeration.
   */
  zOffset?: number;
}
/**
 * Represents a range keyframe.
 */
export interface CIMKeyframeRange {
  /**
   * Gets or sets the value of the active range.
   */
  range?: null | CIMRange;
  /**
   * Gets or sets the method of transition for the minimum value of the range.
   */
  minTransition?: AnimationTransition;
  /**
   * Gets or sets the method of transition for the maximum value of the range.
   */
  maxTransition?: AnimationTransition;
  /**
   * Gets or sets a value indicating whether the range should be all values less than the minimum value and greater than the maximum value.
   */
  isExclusion?: boolean;
  /**
   * Gets or sets the layer range extents.  Each layer range applies to a single map.
   */
  layerRangeExtents?: CIMLayerRange[] | null;
  /**
   * Gets or sets the method of transition for the layer range extents.
   */
  layerRangeTransition?: AnimationTransition;
  /**
   * Gets or sets the URI of the layer with the active range.  Specify a single layer or leave empty to indicate all layers that share the active range name.
   */
  activeRangeLayer?: null | string;
  /**
   * Gets or sets the active range name.  Used to update which range is active.
   */
  activeRangeName?: null | string;
}
/**
 * Represents a range.
 *
 */
export interface CIMRange {
  /**
   * Gets or sets the minimum.
   */
  min?: number;
  /**
   * Gets or sets the maximum.
   */
  max?: number;
}
/**
 * Represents a layer range.
 *
 */
export interface CIMLayerRange {
  /**
   * Gets or sets the URI of the layer this range is defined for.
   */
  layerURI?: null | string;
  /**
   * Gets or sets the range name.
   */
  rangeName?: null | string;
  /**
   * Gets or sets the current range.
   */
  currentRange?: null | CIMRange;
  /**
   * Gets or sets a value indicating whether or not this is an exclusion range.
   */
  isExclusion?: boolean;
}
/**
 * Represents a time keyframe.
 */
export interface CIMKeyframeTime {
  /**
   * Gets or sets the value of the time extent.
   */
  time?: null | TimeExtent;
  /**
   * Gets or sets the time relation.
   */
  timeRelation?: EsriTimeRelation;
  /**
   * Gets or sets the method of transition for the end value of the time extent.
   */
  endTimeTransition?: AnimationTransition;
  /**
   * Gets or sets the method of transition for the start value of the time extent.
   */
  startTimeTransition?: AnimationTransition;
}
/**
 * Represents an extent of time defined by a start and end date.
 */
export interface TimeExtent {
  /**
   * Gets or sets the time zone definition of the time.
   */
  timeReference?: null | TimeReference;
  /**
   * Gets or sets the start time of the extent.
   */
  startTime?: string;
  /**
   * Gets or sets the end time of the extent.
   */
  endTime?: string;
  /**
   * Gets or sets a value indicating if the time extent is empty.
   */
  empty?: boolean;
  /**
   * Gets or sets a value indicating if the extent contains a start time. If false the time extent has no lower bound.
   */
  startTimeSpecified?: boolean;
  /**
   * Gets or sets a value indicating if the extent contains an end time. If false the time extent has no upper bound.
   */
  endTimeSpecified?: boolean;
}
/**
 * Represents the time zone definition for a given date and time.
 */
export interface TimeReference {
  /**
   * Gets or sets the windows id for the time zone.
   */
  timeZoneNameID?: null | string;
  /**
   * Gets or sets a value indicating if the time reference should honor daylight savings time.
   */
  respectsDaylightSavingTime?: boolean;
  /**
   * Gets or sets a value indicating if the time reference should respect dynamic rules for adjusting with daylight savings time for specific years.
   */
  respectsDynamicAdjustmentRules?: boolean;
}
/**
 * Represents a surface keyframe.
 */
export interface CIMKeyframeSurface {
  /**
   * Gets or sets the id for the surface.
   */
  surfaceID?: null | string;
  /**
   * Gets or sets the method of transition for the surface.
   */
  transition?: AnimationTransition;
  /**
   * Gets or sets the vertical exaggeration for the surface.
   */
  verticalExaggeration?: number;
  /**
   * Gets or sets a value indicating whether the surface is visible.
   */
  visible?: boolean;
  /**
   * Gets or sets the direction to clip from an edge.
   */
  swipeDirection?: SwipeDirection;
  /**
   * Gets or sets the amount of the visible area to clip.
   */
  swipePercent?: number;
  /**
   * Gets or sets the elevation sources.
   */
  baseSources?: CIMKeyframeElevationSource[] | null;
}
/**
 * Represents an elevation source keyframe.
 */
export interface CIMKeyframeElevationSource {
  /**
   * Gets or sets the id for the elevation source.
   */
  sourceID?: null | string;
  /**
   * Gets or sets a value indicating whether the elevation source is visible.
   */
  visible?: boolean;
}
/**
 * Represents an exploratory analysis keyframe.
 */
export interface CIMKeyframeAnalysis {
  /**
   * Gets or sets the exploratory analysis definition.
   */
  analysis?: null | CIMExploratoryAnalysisDefinition;
  /**
   * Gets or sets the method of transition for the exploratory analysis item.
   */
  transition?: AnimationTransition;
}
/**
 * Represents an exploratory analysis definition.
 */
export interface CIMExploratoryAnalysisDefinition {
  /**
   * Gets or sets the id.
   */
  id?: number;
}
/**
 * Represents a graphic and list of keyframes indicating properties that can be changed during the animation.
 */
export interface CIMAnimationScreenGraphic {
  /**
   * Gets or sets the graphic to be displayed.
   */
  graphic?: null | CIMGraphic;
  /**
   * Gets or sets an identifier for the user.
   */
  alias?: null | string;
  /**
   * Gets or sets the graphic properties keyframes.
   */
  keyframes?: CIMAnimationScreenGraphicKeyframe[] | null;
}
/**
 * Represents a graphic.
 */
export interface CIMGraphic {
  /**
   * Gets or sets the symbol for the graphic.
   */
  symbol?: null | CIMSymbolReference;
  /**
   * Gets or sets the transparency of the graphic. Typically set by the layer or element during draw. Change the transparency of layers in the symbol for persistent changes.
   */
  transparency?: number;
  /**
   * Gets or sets the blending mode of the graphic. Typically set by the layer or element during draw.
   */
  blendingMode?: BlendingMode;
  /**
   * Gets or sets an array of masks for the graphic. Typically set by the layer or element during draw.
   */
  masks?: unknown[] | null;
  /**
   * Gets or sets the reference scale of the graphic. Typically set by the layer or element during draw.
   */
  referenceScale?: number;
  /**
   * Gets or sets a property set of attributes. Typically set by the layer or element during draw.
   */
  attributes?: null | {
    [k: string]: unknown;
  };
  /**
   * Gets or sets the placement anchor of the graphic.
   */
  placement?: Anchor;
}
/**
 * Represents a symbol reference.
 *
 */
export interface CIMSymbolReference {
  /**
   * Gets or sets the primitive overrides. Typically set by renderers at draw time.
   */
  primitiveOverrides?: CIMPrimitiveOverride[] | null;
  /**
   * Gets or sets the style path. Reserved for future use.
   */
  stylePath?: null | string;
  /**
   * Gets or sets the symbol.
   */
  symbol?: null | CIMSymbol;
  /**
   * Gets or sets the symbol name.
   */
  symbolName?: null | string;
  /**
   * Gets or sets the minimum scale range the symbol reference should be displayed at.
   */
  minScale?: number;
  /**
   * Gets or sets the maximum scale range the symbol reference should be displayed at.
   */
  maxScale?: number;
  /**
   * Gets or sets an array of scale dependent sizes.
   */
  scaleDependentSizeVariation?: CIMScaleDependentSizeVariation[] | null;
  /**
   * Gets or sets the minimum distance at which symbols are visible. Objects closer than this don't get rendered.
   */
  minDistance?: number;
  /**
   * Gets or sets the maximum distance at which symbols are visible. Objects beyond this point don't get rendered.
   */
  maxDistance?: number;
}
/**
 * Represents a primitive override.
 *
 */
export interface CIMPrimitiveOverride {
  /**
   * Gets or sets the primitive name this override applies to.
   */
  primitiveName?: null | string;
  /**
   * Gets or sets the property name in the primitive this override applies to.
   */
  propertyName?: null | string;
  /**
   * Gets or sets the expression.
   */
  expression?: null | string;
  /**
   * Gets or sets ExpressionInfo that contains the Arcade expression that returns value as a number or a string depending on the PropertyName.
   */
  valueExpressionInfo?: null | CIMExpressionInfo;
}
/**
 * Represents the properties required for authoring an Arcade expression.
 */
export interface CIMExpressionInfo {
  /**
   * Gets or sets the human readable text that describes the expression.
   */
  title?: null | string;
  /**
   * Gets or sets the Arcade expression used to evaluate and return the value that a property expects.
   */
  expression?: null | string;
  /**
   * Gets or sets the Name of the expression.
   */
  name?: null | string;
  /**
   * Gets or sets the ReturnType of the expression.
   */
  returnType?: ExpressionReturnType;
}
/**
 * Represents a symbol. A symbol is used to describe how a geometric shape, such as that from a graphic or feature, is displayed.
 *
 */
export interface CIMSymbol {}
/**
 * Represents the scale dependent size variations for a symbol reference.
 *
 */
export interface CIMScaleDependentSizeVariation {
  /**
   * Gets or sets the scale the size is associated with.
   */
  scale?: number;
  /**
   * Gets or sets the size for the associated scale.
   */
  size?: number;
}
/**
 * Properties defining the graphic at a single point in time for the animation.
 */
export interface CIMAnimationScreenGraphicKeyframe {
  /**
   * Gets or sets the time in seconds relative to the beginning of the track.
   */
  trackTime?: number;
  /**
   * Gets or sets the horizontal placement percent of the graphic anchor position on the viewer (0 is left edge, 1 is right edge).
   */
  anchorX?: number;
  /**
   * Gets or sets the vertical placement percent of the graphic anchor position on the viewer (0 is top edge, 1 is bottom edge).
   */
  anchorY?: number;
  /**
   * Gets or sets the transparency of the graphic.
   */
  transparency?: number;
  /**
   * Gets or sets the size multiplier for the graphic.
   */
  scale?: number;
  /**
   * Gets or sets the pixel width for the graphic. It applies only to the animation screen graphic that contains a polygon graphic.
   */
  elementWidth?: number;
  /**
   * Gets or sets the pixel height for the graphic. It applies only to the animation screen graphic that contains a polygon graphic.
   */
  elementHeight?: number;
  /**
   * Gets or sets the angle of rotation (in degrees) for the graphic. It applies only to the animation screen graphic that contains a polygon graphic.
   */
  rotation?: number;
}
