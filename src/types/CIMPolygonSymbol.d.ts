/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Represents a polygon symbol which is used to draw polygon features or polygon graphics.
 *
 */
export interface CIMPolygonSymbol {
  /**
   * Gets or sets the geometric effects that are applied to the symbol.
   */
  effects?: CIMGeometricEffect[] | null;
  /**
   * Gets or sets the symbol layers. Symbol layers are the components that make up a symbol. A symbol layer is represented by a stroke, fill, marker, or procedural symbol layer.
   */
  symbolLayers?: CIMSymbolLayer[] | null;
  /**
   * Gets or sets the representative image of the symbol as a base64 encoded string.
   */
  thumbnailURI?: null | string;
  /**
   * Gets or sets a value indicating whether the symbol size properties are rendered using real world units or page units. When set to true the symbol will draw using real world units (e.g. meters).
   */
  useRealWorldSymbolSizes?: boolean;
}
/**
 * Represents a geometric effect, this is base class for all geometric effects.
 */
export interface CIMGeometricEffect {
  /**
   * Gets or sets the primitive name.
   */
  primitiveName?: null | string;
}
/**
 * Represents a symbol layer. Symbol layers are the components that make up a symbol. A symbol layer is represented by a stroke, fill, marker, or procedural symbol layer.
 *
 */
export interface CIMSymbolLayer {
  /**
   * Gets or sets whether the geometric effects that are applied to the symbol layer. Effects dynamically alter the feature geometry when the symbology is applied. Multiple effects applied to a symbol layer are rendered sequentially.
   */
  effects?: CIMGeometricEffect[] | null;
  /**
   * Gets or sets a value indicating whether the symbol layer is visible. The symbol layer draws only when enabled. Currently, an invisible layer is not considered in any transformations when in a 3D context.
   */
  enable?: boolean;
  /**
   * Gets or sets the internal name of the symbol layer used for symbol level drawing.
   */
  name?: null | string;
  /**
   * Gets or sets a value indicating whether the color set at the basic properties level is applied to the symbol layer. If the symbol layer is color locked then changes made to the color in the basic properties will not be applied to the symbol layer.
   */
  colorLocked?: boolean;
  /**
   * Gets or sets the primitive name.
   */
  primitiveName?: null | string;
  /**
   * Gets or sets a value indicating whether or not the symbol layer should overprint in press printing.
   */
  overprint?: boolean;
}
